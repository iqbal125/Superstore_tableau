<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10300.17.0615.2100                               -->
<workbook original-version='10.3' source-build='10.3.1 (10300.17.0615.2100)' source-platform='win' version='10.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='10.3'>
      <aliases enabled='yes' />
      <column caption='Top Customers' datatype='integer' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='5'>
        <calculation class='tableau' formula='5' />
        <range granularity='5' max='20' min='5' />
      </column>
      <column caption='Profit Bin Size' datatype='integer' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='200'>
        <calculation class='tableau' formula='200' />
        <range granularity='50' max='200' min='50' />
      </column>
    </datasource>
    <datasource inline='true' name='Sample - Superstore' version='10.3'>
      <connection class='federated'>
        <named-connections>
          <named-connection name='Sample - Superstoreleaf'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Mohammad/Documents/My Tableau Repository/Datasources/10.3/en_US-US/Sample - Superstore.xls' interpretationMode='0' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='Sample - Superstoreleaf' name='Orders' table='[Orders$]' type='table'>
          <columns gridOrigin='A1:U9995:no:A1:U9995:0' header='yes' outcome='6'>
            <column datatype='integer' name='Row ID' ordinal='0' />
            <column datatype='string' name='Order ID' ordinal='1' />
            <column datatype='date' name='Order Date' ordinal='2' />
            <column datatype='date' name='Ship Date' ordinal='3' />
            <column datatype='string' name='Ship Mode' ordinal='4' />
            <column datatype='string' name='Customer ID' ordinal='5' />
            <column datatype='string' name='Customer Name' ordinal='6' />
            <column datatype='string' name='Segment' ordinal='7' />
            <column datatype='string' name='Country' ordinal='8' />
            <column datatype='string' name='City' ordinal='9' />
            <column datatype='string' name='State' ordinal='10' />
            <column datatype='integer' name='Postal Code' ordinal='11' />
            <column datatype='string' name='Region' ordinal='12' />
            <column datatype='string' name='Product ID' ordinal='13' />
            <column datatype='string' name='Category' ordinal='14' />
            <column datatype='string' name='Sub-Category' ordinal='15' />
            <column datatype='string' name='Product Name' ordinal='16' />
            <column datatype='real' name='Sales' ordinal='17' />
            <column datatype='integer' name='Quantity' ordinal='18' />
            <column datatype='real' name='Discount' ordinal='19' />
            <column datatype='real' name='Profit' ordinal='20' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Row ID</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Row ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Row ID</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order ID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Order ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Order ID</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order Date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Order Date]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Order Date</remote-alias>
            <ordinal>2</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Ship Date]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Ship Date</remote-alias>
            <ordinal>3</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Mode</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Ship Mode]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Ship Mode</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer ID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Customer ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Customer ID</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Customer Name]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Customer Name</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Segment</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Segment]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Segment</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Postal Code</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Postal Code]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Postal Code</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product ID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Product ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Product ID</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Category]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Category</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sub-Category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Sub-Category]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Sub-Category</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Product Name]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Product Name</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sales</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sales]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Sales</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Quantity</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Quantity]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Quantity</remote-alias>
            <ordinal>18</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Discount</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Discount]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Discount</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Profit</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Profit]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Profit</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Orders]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:U9995:no:A1:U9995:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Profit Ratio' datatype='real' default-format='p0%' name='[Calculation_5571209093911105]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Profit])/SUM([Sales])' scope-isolation='false' />
      </column>
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Customer Name]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='integer' default-format='*00000' name='[Postal Code]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
      <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Row ID]' role='dimension' type='ordinal' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <group name='[Top Customers by Profit]' name-style='unqualified' user:ui-builder='filter-group'>
        <groupfilter count='[Parameters].[Parameter 1]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
          <groupfilter direction='DESC' expression='SUM([Profit])' function='order' user:ui-marker='order'>
            <groupfilter function='level-members' level='[Customer Name]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </groupfilter>
        </groupfilter>
      </group>
      <drill-paths>
        <drill-path name='Location' />
        <drill-path name='Product' />
      </drill-paths>
      <folder name='Customer' role='dimensions' />
      <folder name='Order' role='dimensions' />
      <layout dim-ordering='alphabetic' dim-percentage='0.52994' group-percentage='0.0419162' measure-ordering='alphabetic' measure-percentage='0.350299' parameter-percentage='0.0778443' rowDisplayCount='1000' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <sort class='manual' column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </sort>
      </default-sorts>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Top Customers' datatype='integer' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='5'>
          <calculation class='tableau' formula='5' />
          <range granularity='5' max='20' min='5' />
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Filter Tables City'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[Sample - Superstore].[none:Sub-Category:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
              <groupfilter from='&quot;Accessories&quot;' function='range' level='[none:Sub-Category:nk]' to='&quot;Supplies&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[Sample - Superstore].[none:Sub-Category:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([Sample - Superstore].[none:Sub-Category:nk] / ([Sample - Superstore].[none:Category:nk] / ([Sample - Superstore].[none:State:nk] / [Sample - Superstore].[none:City:nk])))</rows>
        <cols>[Sample - Superstore].[sum:Profit:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Profit Map'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='None' name='[none:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[Sample - Superstore].[none:Profit:qk]' included-values='in-range'>
            <min>-821.0</min>
            <max>408.0</max>
          </filter>
          <filter class='categorical' column='[Sample - Superstore].[none:Sub-Category:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
              <groupfilter from='&quot;Accessories&quot;' function='range' level='[none:Sub-Category:nk]' to='&quot;Supplies&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[Sample - Superstore].[none:Sub-Category:nk]</column>
            <column>[Sample - Superstore].[none:Profit:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[Sample - Superstore].[Longitude (generated)]' field-type='quantitative' max='-4909234.2806638274' min='-19749026.871643346' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[Sample - Superstore].[Latitude (generated)]' field-type='quantitative' max='8780325.1125818435' min='-947062.20962446975' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[Sample - Superstore].[none:State:nk]' />
              <color column='[Sample - Superstore].[sum:Profit:qk]' />
              <geometry column='[Sample - Superstore].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>(([Sample - Superstore].[none:Category:nk] / [Sample - Superstore].[none:Sub-Category:nk]) * [Sample - Superstore].[Latitude (generated)])</rows>
        <cols>[Sample - Superstore].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Profit Region Sub Category'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([Sample - Superstore].[none:Sub-Category:nk] / ([Sample - Superstore].[none:Category:nk] / [Sample - Superstore].[none:Region:nk]))</rows>
        <cols>[Sample - Superstore].[sum:Profit:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Profit Region and Category'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([Sample - Superstore].[none:Region:nk] / [Sample - Superstore].[none:Category:nk])</rows>
        <cols>[Sample - Superstore].[sum:Profit:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Profit by Category'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[Sample - Superstore].[none:Category:nk]</rows>
        <cols>[Sample - Superstore].[sum:Profit:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Profit by Region'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column-instance column='[Profit]' derivation='Avg' name='[avg:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[Sample - Superstore].[avg:Profit:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[Sample - Superstore].[none:Region:nk]</rows>
        <cols>[Sample - Superstore].[sum:Profit:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Profits by Segment'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Segment]' role='dimension' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[Sample - Superstore].[none:City:nk]'>
            <groupfilter expression='SUM([Profit]) &lt; -100.' function='filter' user:ui-filter-by-field='true' user:ui-marker='filter-by'>
              <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Akron&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Allen&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Anaheim&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Arlington&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Aurora&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Bakersfield&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Baltimore&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Bellingham&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Bloomington&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Boise&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Bristol&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Broken Arrow&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Buffalo Grove&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Burlington&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Chandler&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Charlotte&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Chesapeake&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Chicago&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Chico&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Clinton&quot;' />
                <groupfilter from='&quot;Colorado Springs&quot;' function='range' level='[none:City:nk]' to='&quot;Columbus&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Concord&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Conway&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Cranston&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Dallas&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Daytona Beach&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Decatur&quot;' />
                <groupfilter from='&quot;Denver&quot;' function='range' level='[none:City:nk]' to='&quot;Dover&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Dublin&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Edmonds&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;El Paso&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Encinitas&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Everett&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairfield&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Lauderdale&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Franklin&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Fresno&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Gilbert&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Greensboro&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Harrisonburg&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Henderson&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Houston&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Huntsville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Jackson&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Jacksonville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Knoxville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lafayette&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakeland&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakewood&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lancaster&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawrence&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawton&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Long Beach&quot;' />
                <groupfilter from='&quot;Lorain&quot;' function='range' level='[none:City:nk]' to='&quot;Louisville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Mansfield&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Marion&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Medina&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Memphis&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Mentor&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Mesa&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Miami&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Milwaukee&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Minneapolis&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Mobile&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Montgomery&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Morgan Hill&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Muskogee&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Nashville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;New York City&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Newport News&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Noblesville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;North Las Vegas&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Oakland&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Oceanside&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Orem&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Pasadena&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Passaic&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Pembroke Pines&quot;' />
                <groupfilter from='&quot;Pharr&quot;' function='range' level='[none:City:nk]' to='&quot;Phoenix&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Plano&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Pomona&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Providence&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Provo&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Quincy&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Redmond&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Richmond&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Rochester&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Rockford&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Peters&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Salem&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;San Antonio&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;San Diego&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;San Francisco&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Ana&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Seattle&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Southaven&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Spokane&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Springfield&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Suffolk&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Tampa&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Texas City&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Toledo&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Torrance&quot;' />
                <groupfilter from='&quot;Troy&quot;' function='range' level='[none:City:nk]' to='&quot;Tulsa&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Twin Falls&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Vineland&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Virginia Beach&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Wheeling&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilmington&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Yonkers&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[Sample - Superstore].[none:Sub-Category:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
              <groupfilter from='&quot;Accessories&quot;' function='range' level='[none:Sub-Category:nk]' to='&quot;Supplies&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[Sample - Superstore].[none:Sub-Category:nk]</column>
            <column>[Sample - Superstore].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[Sample - Superstore].[sum:Profit:qk]' />
              <text column='[Sample - Superstore].[none:Segment:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([Sample - Superstore].[none:Sub-Category:nk] / ([Sample - Superstore].[none:Category:nk] / ([Sample - Superstore].[none:State:nk] / ([Sample - Superstore].[none:City:nk] / [Sample - Superstore].[none:Segment:nk]))))</rows>
        <cols>[Sample - Superstore].[sum:Profit:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Profits by Shipping'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Ship Mode]' role='dimension' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ship Mode]' derivation='None' name='[none:Ship Mode:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[Sample - Superstore].[none:City:nk]'>
            <groupfilter expression='SUM([Profit]) &lt; -100.' function='filter' user:ui-filter-by-field='true' user:ui-marker='filter-by'>
              <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Akron&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Allen&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Anaheim&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Arlington&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Aurora&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Bakersfield&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Baltimore&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Bellingham&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Bloomington&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Boise&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Bristol&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Broken Arrow&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Buffalo Grove&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Burlington&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Chandler&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Charlotte&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Chesapeake&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Chicago&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Chico&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Clinton&quot;' />
                <groupfilter from='&quot;Colorado Springs&quot;' function='range' level='[none:City:nk]' to='&quot;Columbus&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Concord&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Conway&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Cranston&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Dallas&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Daytona Beach&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Decatur&quot;' />
                <groupfilter from='&quot;Denver&quot;' function='range' level='[none:City:nk]' to='&quot;Dover&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Dublin&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Edmonds&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;El Paso&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Encinitas&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Everett&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairfield&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Lauderdale&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Franklin&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Fresno&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Gilbert&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Greensboro&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Harrisonburg&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Henderson&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Houston&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Huntsville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Jackson&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Jacksonville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Knoxville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lafayette&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakeland&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakewood&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lancaster&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawrence&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawton&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Long Beach&quot;' />
                <groupfilter from='&quot;Lorain&quot;' function='range' level='[none:City:nk]' to='&quot;Louisville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Mansfield&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Marion&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Medina&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Memphis&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Mentor&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Mesa&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Miami&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Milwaukee&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Minneapolis&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Mobile&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Montgomery&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Morgan Hill&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Muskogee&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Nashville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;New York City&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Newport News&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Noblesville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;North Las Vegas&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Oakland&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Oceanside&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Orem&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Pasadena&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Passaic&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Pembroke Pines&quot;' />
                <groupfilter from='&quot;Pharr&quot;' function='range' level='[none:City:nk]' to='&quot;Phoenix&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Plano&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Pomona&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Providence&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Provo&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Quincy&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Redmond&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Richmond&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Rochester&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Rockford&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Peters&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Salem&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;San Antonio&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;San Diego&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;San Francisco&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Ana&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Seattle&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Southaven&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Spokane&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Springfield&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Suffolk&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Tampa&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Texas City&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Toledo&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Torrance&quot;' />
                <groupfilter from='&quot;Troy&quot;' function='range' level='[none:City:nk]' to='&quot;Tulsa&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Twin Falls&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Vineland&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Virginia Beach&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Wheeling&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilmington&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Yonkers&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[Sample - Superstore].[none:Sub-Category:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
              <groupfilter from='&quot;Accessories&quot;' function='range' level='[none:Sub-Category:nk]' to='&quot;Supplies&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[Sample - Superstore].[none:Sub-Category:nk]</column>
            <column>[Sample - Superstore].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[Sample - Superstore].[sum:Profit:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([Sample - Superstore].[none:Sub-Category:nk] / ([Sample - Superstore].[none:Category:nk] / ([Sample - Superstore].[none:State:nk] / ([Sample - Superstore].[none:City:nk] / [Sample - Superstore].[none:Ship Mode:nk]))))</rows>
        <cols>[Sample - Superstore].[sum:Profit:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Profits by State'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[Sample - Superstore].[none:Sub-Category:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
              <groupfilter from='&quot;Accessories&quot;' function='range' level='[none:Sub-Category:nk]' to='&quot;Supplies&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[Sample - Superstore].[none:Sub-Category:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([Sample - Superstore].[none:Sub-Category:nk] / ([Sample - Superstore].[none:Category:nk] / [Sample - Superstore].[none:State:nk]))</rows>
        <cols>[Sample - Superstore].[sum:Profit:qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <datasources>
        <datasource name='Sample - Superstore' />
      </datasources>
      <datasource-dependencies datasource='Sample - Superstore'>
        <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
        <column-instance column='[Profit]' derivation='None' name='[none:Profit:qk]' pivot='key' type='quantitative' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='50000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='50000' id='3' type='layout-basic' w='84000' x='0' y='0'>
              <zone h='50000' id='1' name='Profit Map' w='84000' x='0' y='0' />
            </zone>
            <zone fixed-size='160' h='50000' id='4' is-fixed='true' param='vert' type='layout-flow' w='16000' x='84000' y='0'>
              <zone h='9625' id='6' name='Profit Map' param='[Sample - Superstore].[none:Profit:qk]' show-domain='false' show-null-ctrls='false' type='filter' w='16000' x='84000' y='0' />
              <zone h='9125' id='7' name='Profit Map' pane-specification-id='0' param='[Sample - Superstore].[sum:Profit:qk]' type='color' w='16000' x='84000' y='9625' />
            </zone>
          </zone>
          <zone h='50000' id='8' name='Profits by State' w='100000' x='0' y='50000' />
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Exploration of Losses' type='storyboard'>
      <style>
        <style-rule element='story-point-caption'>
          <format attr='width' value='304' />
        </style-rule>
      </style>
      <size maxheight='964' maxwidth='1016' minheight='964' minwidth='1016' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='1' param='vert' removable='false' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='5602' id='3' type='title' w='100000' x='0' y='0' />
            <zone fixed-size='143' h='15664' id='4' is-fixed='true' paired-zone-id='5' removable='false' type='flipboard-nav' w='100000' x='0' y='5602' />
            <zone h='78319' id='5' paired-zone-id='4' removable='false' type='flipboard' w='100000' x='0' y='21266'>
              <flipboard active-id='12' nav-type='caption' show-nav-arrows='true'>
                <story-points>
                  <story-point caption='Here we are starting to do a basic exploration of profits and looking at the Profits by Region.' captured-sheet='Profit by Region' id='3' />
                  <story-point caption='This is the Profits by Category. We notice that Furniture has significantly less profits than the other two categories. ' captured-sheet='Profit by Category' id='2' />
                  <story-point caption='Combining Region and Catgory, we make an intersting discovery. Furniture in the central region has negative profits.' captured-sheet='Profit Region and Category' id='4' />
                  <story-point caption='Going deeper and looking at sub-categories, we notice more negative profits. Tables seem to have an unusually large negative profits.' captured-sheet='Profit Region Sub Category' id='5' />
                  <story-point caption='With a deeper look at tables, we see that not all states are unprofitable however. ' captured-sheet='Profits by State' id='7' />
                  <story-point caption='Going even further we see that only certain cities are unprofitable. With only a handful of cities representing the bulk of the losses. ' captured-sheet='Filter Tables City' id='8' />
                  <story-point caption='We now look at if the losses have anything to do with segment. All segments have losses so we cant conclude anything. ' captured-sheet='Profits by Segment' id='9' />
                  <story-point caption='Looking at the shipping method we see that standard class shipping seems to have more losses. ' captured-sheet='Profits by Shipping' id='10' />
                  <story-point caption='Here is an interactive map that lets us filter profits by state. ' captured-sheet='Dashboard 1' id='12'>
                    <currentDeltas>
                      <worksheet name='Profit Map'>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[Sample - Superstore].[Latitude (generated)]' field-type='quantitative' max='8412032.6991735641' min='-2029931.4448919906' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[Sample - Superstore].[Longitude (generated)]' field-type='quantitative' max='-1393404.9857578408' min='-23364351.623271175' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                      </worksheet>
                    </currentDeltas>
                    <capturedDeltas />
                  </story-point>
                </story-points>
              </flipboard>
            </zone>
          </zone>
        </zone>
        <zone flipboard-zone-id='5' h='9959' hidden='true' id='6' story-point-id='4' type='text' w='33268' x='10531' y='53423'>
          <formatted-text>
            <run>Negative profits are unacceptable in any circumstance. </run>
          </formatted-text>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='Profit by Category'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore].[avg:Profit:qk]</field>
            <field>[Sample - Superstore].[none:Category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Profit by Region'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='Profit Region and Category'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore].[none:Category:nk]</field>
            <field>[Sample - Superstore].[none:Region:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Profit Region Sub Category'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore].[none:Category:nk]</field>
            <field>[Sample - Superstore].[none:Region:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Profits by State'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore].[none:Category:nk]</field>
            <field>[Sample - Superstore].[none:City:nk]</field>
            <field>[Sample - Superstore].[none:Region:nk]</field>
            <field>[Sample - Superstore].[none:Ship Mode:nk]</field>
            <field>[Sample - Superstore].[none:State:nk]</field>
            <field>[Sample - Superstore].[none:Sub-Category:nk]</field>
            <field>[Sample - Superstore].[yr:Order Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Profits by Segment'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore].[none:Category:nk]</field>
            <field>[Sample - Superstore].[none:City:nk]</field>
            <field>[Sample - Superstore].[none:Segment:nk]</field>
            <field>[Sample - Superstore].[none:Ship Mode:nk]</field>
            <field>[Sample - Superstore].[none:State:nk]</field>
            <field>[Sample - Superstore].[none:Sub-Category:nk]</field>
            <field>[Sample - Superstore].[sum:Profit:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Profits by Shipping'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore].[none:Category:nk]</field>
            <field>[Sample - Superstore].[none:City:nk]</field>
            <field>[Sample - Superstore].[none:Segment:nk]</field>
            <field>[Sample - Superstore].[none:Ship Mode:nk]</field>
            <field>[Sample - Superstore].[none:State:nk]</field>
            <field>[Sample - Superstore].[none:Sub-Category:nk]</field>
            <field>[Sample - Superstore].[sum:Profit:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Profit Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[Sample - Superstore].[none:Profit:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card pane-specification-id='0' param='[Sample - Superstore].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore].[none:Category:nk]</field>
            <field>[Sample - Superstore].[none:City:nk]</field>
            <field>[Sample - Superstore].[none:Profit:qk]</field>
            <field>[Sample - Superstore].[none:Region:nk]</field>
            <field>[Sample - Superstore].[none:Ship Mode:nk]</field>
            <field>[Sample - Superstore].[none:State:nk]</field>
            <field>[Sample - Superstore].[none:Sub-Category:nk]</field>
            <field>[Sample - Superstore].[yr:Order Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Profit Map'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Profits by State' />
      </viewpoints>
      <active id='8' />
    </window>
    <window class='dashboard' maximized='true' name='Exploration of Losses'>
      <viewpoints />
      <active id='4' />
    </window>
    <window class='worksheet' hidden='true' name='Filter Tables City'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore].[none:Category:nk]</field>
            <field>[Sample - Superstore].[none:City:nk]</field>
            <field>[Sample - Superstore].[none:State:nk]</field>
            <field>[Sample - Superstore].[none:Sub-Category:nk]</field>
            <field>[Sample - Superstore].[sum:Profit:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Exploration of Losses' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Profit Map' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Profit Region Sub Category' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Profit Region and Category' width='192'>
      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
    </thumbnail>
    <thumbnail height='147' name='Profit by Category' width='192'>
      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
      CYBQ2v8DiFAX3bW5xjoAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='167' name='Profit by Region' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Profits by Segment' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Profits by Shipping' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='Profits by State' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
