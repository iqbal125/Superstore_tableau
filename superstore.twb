<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10300.17.0615.2100                               -->
<workbook original-version='10.3' source-build='10.3.1 (10300.17.0615.2100)' source-platform='win' version='10.3' xml:base='https://public.tableau.com' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <repository-location id='superstore_profits' path='/workbooks' revision='1.0' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='10.3'>
      <aliases enabled='yes' />
      <column caption='Top Customers' datatype='integer' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='5'>
        <calculation class='tableau' formula='5' />
        <range granularity='5' max='20' min='5' />
      </column>
      <column caption='Profit Bin Size' datatype='integer' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='200'>
        <calculation class='tableau' formula='200' />
        <range granularity='50' max='200' min='50' />
      </column>
    </datasource>
    <datasource inline='true' name='Sample - Superstore' version='10.3'>
      <connection class='federated'>
        <named-connections>
          <named-connection name='Sample - Superstoreleaf'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Mohammad/Documents/My Tableau Repository/Datasources/10.3/en_US-US/Sample - Superstore.xls' interpretationMode='0' validate='no' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <relation connection='Sample - Superstoreleaf' name='Orders' table='[Orders$]' type='table'>
          <columns gridOrigin='A1:U9995:no:A1:U9995:0' header='yes' outcome='6'>
            <column datatype='integer' name='Row ID' ordinal='0' />
            <column datatype='string' name='Order ID' ordinal='1' />
            <column datatype='date' name='Order Date' ordinal='2' />
            <column datatype='date' name='Ship Date' ordinal='3' />
            <column datatype='string' name='Ship Mode' ordinal='4' />
            <column datatype='string' name='Customer ID' ordinal='5' />
            <column datatype='string' name='Customer Name' ordinal='6' />
            <column datatype='string' name='Segment' ordinal='7' />
            <column datatype='string' name='Country' ordinal='8' />
            <column datatype='string' name='City' ordinal='9' />
            <column datatype='string' name='State' ordinal='10' />
            <column datatype='integer' name='Postal Code' ordinal='11' />
            <column datatype='string' name='Region' ordinal='12' />
            <column datatype='string' name='Product ID' ordinal='13' />
            <column datatype='string' name='Category' ordinal='14' />
            <column datatype='string' name='Sub-Category' ordinal='15' />
            <column datatype='string' name='Product Name' ordinal='16' />
            <column datatype='real' name='Sales' ordinal='17' />
            <column datatype='integer' name='Quantity' ordinal='18' />
            <column datatype='real' name='Discount' ordinal='19' />
            <column datatype='real' name='Profit' ordinal='20' />
          </columns>
        </relation>
        <refresh increment-key='' incremental-updates='false' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Row ID</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Row ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Row ID</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order ID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Order ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Order ID</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order Date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Order Date]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Order Date</remote-alias>
            <ordinal>2</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Ship Date]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Ship Date</remote-alias>
            <ordinal>3</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Mode</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Ship Mode]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Ship Mode</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer ID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Customer ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Customer ID</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Customer Name]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Customer Name</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Segment</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Segment]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Segment</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Postal Code</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Postal Code]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Postal Code</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product ID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Product ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Product ID</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Category]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Category</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sub-Category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Sub-Category]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Sub-Category</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Product Name]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Product Name</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sales</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sales]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Sales</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Quantity</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Quantity]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Quantity</remote-alias>
            <ordinal>18</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Discount</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Discount]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Discount</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Profit</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Profit]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Profit</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Orders]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:U9995:no:A1:U9995:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Profit Ratio' datatype='real' default-format='p0%' name='[Calculation_5571209093911105]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Profit])/SUM([Sales])' scope-isolation='false' />
      </column>
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Customer Name]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='integer' default-format='*00000' name='[Postal Code]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
      <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Row ID]' role='dimension' type='ordinal' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <group name='[Top Customers by Profit]' name-style='unqualified' user:ui-builder='filter-group'>
        <groupfilter count='[Parameters].[Parameter 1]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
          <groupfilter direction='DESC' expression='SUM([Profit])' function='order' user:ui-marker='order'>
            <groupfilter function='level-members' level='[Customer Name]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </groupfilter>
        </groupfilter>
      </group>
      <drill-paths>
        <drill-path name='Location' />
        <drill-path name='Product' />
      </drill-paths>
      <folder name='Customer' role='dimensions' />
      <folder name='Order' role='dimensions' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='C:/Users/Mohammad/Documents/My Tableau Repository/Datasources/Sample - Superstore.tde' schema='Extract' tablename='Extract' update-time='07/17/2017 04:19:36 AM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh increment-key='' incremental-updates='false'>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='9994' timestamp-start='2017-07-17 04:19:36.082' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Category</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Category]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Category</remote-alias>
              <ordinal>0</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Furniture&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Technology&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>City</remote-name>
              <remote-type>129</remote-type>
              <local-name>[City]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>City</remote-alias>
              <ordinal>1</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>531</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Aberdeen&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Yuma&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>8</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Country]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Country</remote-alias>
              <ordinal>2</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;United States&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;United States&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
                <statistic aggregation='Median' datatype='string'>&quot;United States&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Customer ID</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Customer ID]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Customer ID</remote-alias>
              <ordinal>3</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>793</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;AA-10315&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;ZD-21925&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>10</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Customer Name</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Customer Name]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Customer Name</remote-alias>
              <ordinal>4</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>793</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Aaron Bergman&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Zuschuss Donatelli&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>11</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Discount</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Discount]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Discount</remote-alias>
              <ordinal>5</ordinal>
              <family>Orders</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>12</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='real'>0.0</statistic>
                <statistic aggregation='Max' datatype='real'>0.80000000000000004</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>16</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Number of Records</remote-name>
              <remote-type>16</remote-type>
              <local-name>[Number of Records]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Number of Records</remote-alias>
              <ordinal>6</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>9994.0</statistic>
                <statistic aggregation='Avg' datatype='real'>1.0</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.0</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.0</statistic>
                <statistic aggregation='Var' datatype='real'>0.0</statistic>
                <statistic aggregation='VarP' datatype='real'>0.0</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
                <statistic aggregation='Median' datatype='integer'>1</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>9994.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Order Date</remote-name>
              <remote-type>133</remote-type>
              <local-name>[Order Date]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Order Date</remote-alias>
              <ordinal>7</ordinal>
              <family>Orders</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>1237</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='date'>#2014-01-03#</statistic>
                <statistic aggregation='Max' datatype='date'>#2017-12-30#</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
                <statistic aggregation='Median' datatype='date'>#2016-06-26#</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;date&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Order ID</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Order ID]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Order ID</remote-alias>
              <ordinal>8</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>5009</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;CA-2014-100006&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;US-2017-169551&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>14</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Postal Code</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Postal Code]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Postal Code</remote-alias>
              <ordinal>9</ordinal>
              <family>Orders</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>631</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>551572652.0</statistic>
                <statistic aggregation='Avg' datatype='real'>55190.379427656597</statistic>
                <statistic aggregation='Min' datatype='integer'>1040</statistic>
                <statistic aggregation='Max' datatype='integer'>99301</statistic>
                <statistic aggregation='Stdev' datatype='real'>32063.693350364487</statistic>
                <statistic aggregation='StdevP' datatype='real'>32062.089163078908</statistic>
                <statistic aggregation='Var' datatype='real'>1028080431.2662077</statistic>
                <statistic aggregation='VarP' datatype='real'>1027977561.501222</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>40715111695442.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>9</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Product ID</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Product ID]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Product ID</remote-alias>
              <ordinal>10</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1862</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;FUR-BO-10000112&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;TEC-PH-10004977&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>13</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Product Name</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Product Name]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Product Name</remote-alias>
              <ordinal>11</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1850</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;\&quot;While you Were Out\&quot; Message Book, One Form per Page&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Zipper Ring Binder Pockets&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>12</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Profit</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Profit]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Profit</remote-alias>
              <ordinal>12</ordinal>
              <family>Orders</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>7545</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>286397.02170000126</statistic>
                <statistic aggregation='Avg' datatype='real'>28.656896307784798</statistic>
                <statistic aggregation='Min' datatype='real'>-6599.978000000001</statistic>
                <statistic aggregation='Max' datatype='real'>8399.9759999999987</statistic>
                <statistic aggregation='Stdev' datatype='real'>234.26010769095711</statistic>
                <statistic aggregation='StdevP' datatype='real'>234.24838736035863</statistic>
                <statistic aggregation='Var' datatype='real'>54877.798055378829</statistic>
                <statistic aggregation='VarP' datatype='real'>54872.306980928624</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>556601085.72111595</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Quantity</remote-name>
              <remote-type>16</remote-type>
              <local-name>[Quantity]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Quantity</remote-alias>
              <ordinal>13</ordinal>
              <family>Orders</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>14</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>37873.0</statistic>
                <statistic aggregation='Avg' datatype='real'>3.7895737442465478</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>14</statistic>
                <statistic aggregation='Stdev' datatype='real'>2.2251096911413999</statistic>
                <statistic aggregation='StdevP' datatype='real'>2.2249983660786095</statistic>
                <statistic aggregation='Var' datatype='real'>4.9511131376113768</statistic>
                <statistic aggregation='VarP' datatype='real'>4.9506177290524809</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>192999.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Region</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Region]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Region</remote-alias>
              <ordinal>14</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>4</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Central&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;West&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Row ID</remote-name>
              <remote-type>2</remote-type>
              <local-name>[Row ID]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Row ID</remote-alias>
              <ordinal>15</ordinal>
              <family>Orders</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>9994</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>49945015.0</statistic>
                <statistic aggregation='Avg' datatype='real'>4997.5</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>9994</statistic>
                <statistic aggregation='Stdev' datatype='real'>2885.1636290974325</statistic>
                <statistic aggregation='StdevP' datatype='real'>2885.0192806981377</statistic>
                <statistic aggregation='Var' datatype='real'>8324169.166666667</statistic>
                <statistic aggregation='VarP' datatype='real'>8323336.25</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
                <statistic aggregation='Median' datatype='integer'>4998</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>332783634945.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>15</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (unique)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Sales</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Sales]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Sales</remote-alias>
              <ordinal>16</ordinal>
              <family>Orders</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>6144</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>2297200.8602999551</statistic>
                <statistic aggregation='Avg' datatype='real'>229.85800083049381</statistic>
                <statistic aggregation='Min' datatype='real'>0.44399999999999995</statistic>
                <statistic aggregation='Max' datatype='real'>22638.48</statistic>
                <statistic aggregation='Stdev' datatype='real'>623.24510050868332</statistic>
                <statistic aggregation='StdevP' datatype='real'>623.21391876504867</statistic>
                <statistic aggregation='Var' datatype='real'>388434.45530807879</statistic>
                <statistic aggregation='VarP' datatype='real'>388395.58854248864</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>4409655509.1482697</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Segment</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Segment]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Segment</remote-alias>
              <ordinal>17</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Consumer&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Home Office&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Ship Date</remote-name>
              <remote-type>133</remote-type>
              <local-name>[Ship Date]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Ship Date</remote-alias>
              <ordinal>18</ordinal>
              <family>Orders</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>1334</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='date'>#2014-01-07#</statistic>
                <statistic aggregation='Max' datatype='date'>#2018-01-05#</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;date&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Ship Mode</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Ship Mode]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Ship Mode</remote-alias>
              <ordinal>19</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>4</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;First Class&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Standard Class&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>5</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>State</remote-name>
              <remote-type>129</remote-type>
              <local-name>[State]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>State</remote-alias>
              <ordinal>20</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>49</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Alabama&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Wyoming&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>7</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Sub-Category</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Sub-Category]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Sub-Category</remote-alias>
              <ordinal>21</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>17</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Accessories&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Tables&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>9994</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>6</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.531437' group-percentage='0.0419162' measure-ordering='alphabetic' measure-percentage='0.348802' parameter-percentage='0.0778443' rowDisplayCount='1000' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <sort class='manual' column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </sort>
      </default-sorts>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Top Customers' datatype='integer' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='5'>
          <calculation class='tableau' formula='5' />
          <range granularity='5' max='20' min='5' />
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Filter Tables City'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[Sample - Superstore].[none:Sub-Category:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
              <groupfilter from='&quot;Accessories&quot;' function='range' level='[none:Sub-Category:nk]' to='&quot;Supplies&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[Sample - Superstore].[none:Sub-Category:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([Sample - Superstore].[none:Sub-Category:nk] / ([Sample - Superstore].[none:Category:nk] / ([Sample - Superstore].[none:State:nk] / [Sample - Superstore].[none:City:nk])))</rows>
        <cols>[Sample - Superstore].[sum:Profit:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Profit City'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[Sample - Superstore].[none:Sub-Category:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
              <groupfilter from='&quot;Accessories&quot;' function='range' level='[none:Sub-Category:nk]' to='&quot;Supplies&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[Sample - Superstore].[none:Sub-Category:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[Sample - Superstore].[sum:Profit:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([Sample - Superstore].[none:Sub-Category:nk] / ([Sample - Superstore].[none:Category:nk] / ([Sample - Superstore].[none:State:nk] / [Sample - Superstore].[none:City:nk])))</rows>
        <cols>[Sample - Superstore].[sum:Profit:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Profit Map'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='None' name='[none:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[Sample - Superstore].[none:Profit:qk]' included-values='in-range'>
            <min>-821.0</min>
            <max>408.0</max>
          </filter>
          <filter class='categorical' column='[Sample - Superstore].[none:Sub-Category:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
              <groupfilter from='&quot;Accessories&quot;' function='range' level='[none:Sub-Category:nk]' to='&quot;Supplies&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[Sample - Superstore].[none:Sub-Category:nk]</column>
            <column>[Sample - Superstore].[none:Profit:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[Sample - Superstore].[Longitude (generated)]' field-type='quantitative' max='-4909234.2806638274' min='-19749026.871643346' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[Sample - Superstore].[Latitude (generated)]' field-type='quantitative' max='8780325.1125818435' min='-947062.20962446975' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[Sample - Superstore].[none:State:nk]' />
              <color column='[Sample - Superstore].[sum:Profit:qk]' />
              <geometry column='[Sample - Superstore].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>(([Sample - Superstore].[none:Category:nk] / [Sample - Superstore].[none:Sub-Category:nk]) * [Sample - Superstore].[Latitude (generated)])</rows>
        <cols>[Sample - Superstore].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Profit Region Sub Category'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[Sample - Superstore].[sum:Profit:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([Sample - Superstore].[none:Sub-Category:nk] / ([Sample - Superstore].[none:Category:nk] / [Sample - Superstore].[none:Region:nk]))</rows>
        <cols>[Sample - Superstore].[sum:Profit:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Profit Region and Category'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[Sample - Superstore].[sum:Profit:qk]' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-diverging'>
                <color>#9e1f09</color>
                <color>#a32b17</color>
                <color>#a83926</color>
                <color>#ae4836</color>
                <color>#b35747</color>
                <color>#b86759</color>
                <color>#be786c</color>
                <color>#c38a80</color>
                <color>#c89c95</color>
                <color>#ceb0aa</color>
                <color>#d3c4c1</color>
                <color>#d9d9d9</color>
                <color>#9dcbe4</color>
                <color>#8ec2df</color>
                <color>#80b6d9</color>
                <color>#73a8d0</color>
                <color>#669bc7</color>
                <color>#5c91bf</color>
                <color>#5385b2</color>
                <color>#487aa9</color>
                <color>#3b6ea0</color>
                <color>#306495</color>
                <color>#2b5c8a</color>
              </color-palette>
            </encoding>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[Sample - Superstore].[sum:Profit:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([Sample - Superstore].[none:Region:nk] / [Sample - Superstore].[none:Category:nk])</rows>
        <cols>[Sample - Superstore].[sum:Profit:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Profit by Category'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[Sample - Superstore].[none:Category:nk]</rows>
        <cols>[Sample - Superstore].[sum:Profit:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Profit by Region'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column-instance column='[Profit]' derivation='Avg' name='[avg:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[Sample - Superstore].[avg:Profit:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[Sample - Superstore].[none:Region:nk]</rows>
        <cols>[Sample - Superstore].[sum:Profit:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Profits by Segment'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Segment]' role='dimension' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[Sample - Superstore].[none:City:nk]'>
            <groupfilter expression='SUM([Profit]) &lt; -100.' function='filter' user:ui-filter-by-field='true' user:ui-marker='filter-by'>
              <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Akron&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Allen&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Anaheim&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Arlington&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Aurora&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Bakersfield&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Baltimore&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Bellingham&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Bloomington&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Boise&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Bristol&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Broken Arrow&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Buffalo Grove&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Burlington&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Chandler&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Charlotte&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Chesapeake&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Chicago&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Chico&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Clinton&quot;' />
                <groupfilter from='&quot;Colorado Springs&quot;' function='range' level='[none:City:nk]' to='&quot;Columbus&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Concord&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Conway&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Cranston&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Dallas&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Daytona Beach&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Decatur&quot;' />
                <groupfilter from='&quot;Denver&quot;' function='range' level='[none:City:nk]' to='&quot;Dover&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Dublin&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Edmonds&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;El Paso&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Encinitas&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Everett&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairfield&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Lauderdale&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Franklin&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Fresno&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Gilbert&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Greensboro&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Harrisonburg&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Henderson&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Houston&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Huntsville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Jackson&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Jacksonville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Knoxville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lafayette&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakeland&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakewood&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lancaster&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawrence&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawton&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Long Beach&quot;' />
                <groupfilter from='&quot;Lorain&quot;' function='range' level='[none:City:nk]' to='&quot;Louisville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Mansfield&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Marion&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Medina&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Memphis&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Mentor&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Mesa&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Miami&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Milwaukee&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Minneapolis&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Mobile&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Montgomery&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Morgan Hill&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Muskogee&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Nashville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;New York City&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Newport News&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Noblesville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;North Las Vegas&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Oakland&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Oceanside&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Orem&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Pasadena&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Passaic&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Pembroke Pines&quot;' />
                <groupfilter from='&quot;Pharr&quot;' function='range' level='[none:City:nk]' to='&quot;Phoenix&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Plano&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Pomona&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Providence&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Provo&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Quincy&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Redmond&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Richmond&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Rochester&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Rockford&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Peters&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Salem&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;San Antonio&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;San Diego&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;San Francisco&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Ana&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Seattle&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Southaven&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Spokane&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Springfield&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Suffolk&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Tampa&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Texas City&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Toledo&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Torrance&quot;' />
                <groupfilter from='&quot;Troy&quot;' function='range' level='[none:City:nk]' to='&quot;Tulsa&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Twin Falls&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Vineland&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Virginia Beach&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Wheeling&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilmington&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Yonkers&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[Sample - Superstore].[none:Sub-Category:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
              <groupfilter from='&quot;Accessories&quot;' function='range' level='[none:Sub-Category:nk]' to='&quot;Supplies&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[Sample - Superstore].[none:Sub-Category:nk]</column>
            <column>[Sample - Superstore].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[Sample - Superstore].[sum:Profit:qk]' />
              <text column='[Sample - Superstore].[sum:Profit:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([Sample - Superstore].[none:Sub-Category:nk] / ([Sample - Superstore].[none:Category:nk] / ([Sample - Superstore].[none:State:nk] / ([Sample - Superstore].[none:City:nk] / [Sample - Superstore].[none:Segment:nk]))))</rows>
        <cols>[Sample - Superstore].[sum:Profit:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Profits by Shipping'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Ship Mode]' role='dimension' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ship Mode]' derivation='None' name='[none:Ship Mode:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[Sample - Superstore].[none:City:nk]'>
            <groupfilter expression='SUM([Profit]) &lt; -100.' function='filter' user:ui-filter-by-field='true' user:ui-marker='filter-by'>
              <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Akron&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Allen&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Anaheim&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Arlington&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Aurora&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Bakersfield&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Baltimore&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Bellingham&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Bloomington&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Boise&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Bristol&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Broken Arrow&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Buffalo Grove&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Burlington&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Chandler&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Charlotte&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Chesapeake&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Chicago&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Chico&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Clinton&quot;' />
                <groupfilter from='&quot;Colorado Springs&quot;' function='range' level='[none:City:nk]' to='&quot;Columbus&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Concord&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Conway&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Cranston&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Dallas&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Daytona Beach&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Decatur&quot;' />
                <groupfilter from='&quot;Denver&quot;' function='range' level='[none:City:nk]' to='&quot;Dover&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Dublin&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Edmonds&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;El Paso&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Encinitas&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Everett&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Fairfield&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Fort Lauderdale&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Franklin&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Fresno&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Gilbert&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Greensboro&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Harrisonburg&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Henderson&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Houston&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Huntsville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Jackson&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Jacksonville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Knoxville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lafayette&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakeland&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lakewood&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lancaster&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawrence&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Lawton&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Long Beach&quot;' />
                <groupfilter from='&quot;Lorain&quot;' function='range' level='[none:City:nk]' to='&quot;Louisville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Mansfield&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Marion&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Medina&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Memphis&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Mentor&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Mesa&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Miami&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Milwaukee&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Minneapolis&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Mobile&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Montgomery&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Morgan Hill&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Muskogee&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Nashville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;New York City&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Newport News&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Noblesville&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;North Las Vegas&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Oakland&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Oceanside&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Orem&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Pasadena&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Passaic&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Pembroke Pines&quot;' />
                <groupfilter from='&quot;Pharr&quot;' function='range' level='[none:City:nk]' to='&quot;Phoenix&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Plano&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Pomona&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Providence&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Provo&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Quincy&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Redmond&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Richmond&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Rochester&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Rockford&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Saint Peters&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Salem&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;San Antonio&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;San Diego&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;San Francisco&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Santa Ana&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Seattle&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Southaven&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Spokane&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Springfield&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Suffolk&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Tampa&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Texas City&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Toledo&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Torrance&quot;' />
                <groupfilter from='&quot;Troy&quot;' function='range' level='[none:City:nk]' to='&quot;Tulsa&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Twin Falls&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Vineland&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Virginia Beach&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Wheeling&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Wilmington&quot;' />
                <groupfilter function='member' level='[none:City:nk]' member='&quot;Yonkers&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[Sample - Superstore].[none:Sub-Category:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
              <groupfilter from='&quot;Accessories&quot;' function='range' level='[none:Sub-Category:nk]' to='&quot;Supplies&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[Sample - Superstore].[none:Sub-Category:nk]</column>
            <column>[Sample - Superstore].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[Sample - Superstore].[sum:Profit:qk]' />
              <text column='[Sample - Superstore].[sum:Profit:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([Sample - Superstore].[none:Sub-Category:nk] / ([Sample - Superstore].[none:Category:nk] / ([Sample - Superstore].[none:State:nk] / ([Sample - Superstore].[none:City:nk] / [Sample - Superstore].[none:Ship Mode:nk]))))</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Profits by State'>
      <table>
        <view>
          <datasources>
            <datasource name='Sample - Superstore' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Sample - Superstore'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[Sample - Superstore].[none:Sub-Category:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
              <groupfilter from='&quot;Accessories&quot;' function='range' level='[none:Sub-Category:nk]' to='&quot;Supplies&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[Sample - Superstore].[none:Sub-Category:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[Sample - Superstore].[sum:Profit:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([Sample - Superstore].[none:Sub-Category:nk] / ([Sample - Superstore].[none:Category:nk] / [Sample - Superstore].[none:State:nk]))</rows>
        <cols>[Sample - Superstore].[sum:Profit:qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <datasources>
        <datasource name='Sample - Superstore' />
      </datasources>
      <datasource-dependencies datasource='Sample - Superstore'>
        <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
        <column-instance column='[Profit]' derivation='None' name='[none:Profit:qk]' pivot='key' type='quantitative' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='50000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='50000' id='3' type='layout-basic' w='84000' x='0' y='0'>
              <zone h='50000' id='1' name='Profit Map' w='84000' x='0' y='0' />
            </zone>
            <zone fixed-size='160' h='50000' id='4' is-fixed='true' param='vert' type='layout-flow' w='16000' x='84000' y='0'>
              <zone h='9625' id='6' name='Profit Map' param='[Sample - Superstore].[none:Profit:qk]' show-domain='false' show-null-ctrls='false' type='filter' w='16000' x='84000' y='0' />
              <zone h='9125' id='7' name='Profit Map' pane-specification-id='0' param='[Sample - Superstore].[sum:Profit:qk]' type='color' w='16000' x='84000' y='9625' />
            </zone>
          </zone>
          <zone h='50000' id='8' name='Profits by State' w='100000' x='0' y='50000' />
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Exploration of Losses' type='storyboard'>
      <style>
        <style-rule element='story-point-caption'>
          <format attr='width' value='304' />
        </style-rule>
      </style>
      <size maxheight='964' maxwidth='1016' minheight='964' minwidth='1016' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='1' param='vert' removable='false' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='5602' id='3' type='title' w='100000' x='0' y='0' />
            <zone fixed-size='143' h='15664' id='4' is-fixed='true' paired-zone-id='5' removable='false' type='flipboard-nav' w='100000' x='0' y='5602' />
            <zone h='78319' id='5' paired-zone-id='4' removable='false' type='flipboard' w='100000' x='0' y='21266'>
              <flipboard active-id='12' nav-type='caption' show-nav-arrows='true'>
                <story-points>
                  <story-point caption='Here we are starting to do a basic exploration of profits and looking at the Profits by Region.' captured-sheet='Profit by Region' id='3' />
                  <story-point caption='This is the Profits by Category. We notice that Furniture has significantly less profits than the other two categories. ' captured-sheet='Profit by Category' id='2' />
                  <story-point caption='Combining Region and Catgory, we make an intersting discovery. Furniture in the central region has negative profits.' captured-sheet='Profit Region and Category' id='4' />
                  <story-point caption='Going deeper and looking at sub-categories, we notice more negative profits. Tables seem to have an unusually large negative profits.' captured-sheet='Profit Region Sub Category' id='5' />
                  <story-point caption='With a deeper look at tables, we see that not all states are unprofitable however. ' captured-sheet='Profits by State' id='7' />
                  <story-point caption='Going even further we see that only certain cities are unprofitable. With only a handful of cities representing the bulk of the losses. ' captured-sheet='Profit City' id='8' />
                  <story-point caption='We now look at if the losses have anything to do with segment. All segments have losses so we cant conclude anything. ' captured-sheet='Profits by Segment' id='9' />
                  <story-point caption='Looking at the shipping method we see that standard class shipping seems to have more losses. ' captured-sheet='Profits by Shipping' id='10' />
                  <story-point caption='Here is an interactive map that lets us filter profits by state. ' captured-sheet='Dashboard 1' id='12'>
                    <currentDeltas>
                      <worksheet name='Profit Map'>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[Sample - Superstore].[Latitude (generated)]' field-type='quantitative' max='6766801.6958499178' min='-3645547.6666867211' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[Sample - Superstore].[Longitude (generated)]' field-type='quantitative' max='54755530.022960931' min='32817967.802520078' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                      </worksheet>
                    </currentDeltas>
                    <capturedDeltas>
                      <worksheet name='Profit Map'>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[Sample - Superstore].[Latitude (generated)]' field-type='quantitative' max='8412032.6991735641' min='-2029931.4448919906' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[Sample - Superstore].[Longitude (generated)]' field-type='quantitative' max='-1393404.9857578408' min='-23364351.623271175' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                </story-points>
              </flipboard>
            </zone>
          </zone>
        </zone>
        <zone flipboard-zone-id='5' h='9959' hidden='true' id='6' story-point-id='4' type='text' w='33268' x='10531' y='53423'>
          <formatted-text>
            <run>Negative profits are unacceptable in any circumstance. </run>
          </formatted-text>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='Profit by Category'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore].[avg:Profit:qk]</field>
            <field>[Sample - Superstore].[none:Category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Profit by Region'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='Profit Region and Category'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[Sample - Superstore].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore].[none:Category:nk]</field>
            <field>[Sample - Superstore].[none:Region:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Profit Region Sub Category'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[Sample - Superstore].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore].[none:Category:nk]</field>
            <field>[Sample - Superstore].[none:Region:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Profits by State'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[Sample - Superstore].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore].[none:Category:nk]</field>
            <field>[Sample - Superstore].[none:City:nk]</field>
            <field>[Sample - Superstore].[none:Region:nk]</field>
            <field>[Sample - Superstore].[none:Ship Mode:nk]</field>
            <field>[Sample - Superstore].[none:State:nk]</field>
            <field>[Sample - Superstore].[none:Sub-Category:nk]</field>
            <field>[Sample - Superstore].[yr:Order Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Profits by Segment'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[Sample - Superstore].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore].[none:Category:nk]</field>
            <field>[Sample - Superstore].[none:City:nk]</field>
            <field>[Sample - Superstore].[none:Segment:nk]</field>
            <field>[Sample - Superstore].[none:Ship Mode:nk]</field>
            <field>[Sample - Superstore].[none:State:nk]</field>
            <field>[Sample - Superstore].[none:Sub-Category:nk]</field>
            <field>[Sample - Superstore].[sum:Profit:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Profits by Shipping'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[Sample - Superstore].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore].[none:Category:nk]</field>
            <field>[Sample - Superstore].[none:City:nk]</field>
            <field>[Sample - Superstore].[none:Segment:nk]</field>
            <field>[Sample - Superstore].[none:Ship Mode:nk]</field>
            <field>[Sample - Superstore].[none:State:nk]</field>
            <field>[Sample - Superstore].[none:Sub-Category:nk]</field>
            <field>[Sample - Superstore].[sum:Profit:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Profit Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[Sample - Superstore].[none:Profit:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card pane-specification-id='0' param='[Sample - Superstore].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore].[none:Category:nk]</field>
            <field>[Sample - Superstore].[none:City:nk]</field>
            <field>[Sample - Superstore].[none:Profit:qk]</field>
            <field>[Sample - Superstore].[none:Region:nk]</field>
            <field>[Sample - Superstore].[none:Ship Mode:nk]</field>
            <field>[Sample - Superstore].[none:State:nk]</field>
            <field>[Sample - Superstore].[none:Sub-Category:nk]</field>
            <field>[Sample - Superstore].[yr:Order Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Profit City'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[Sample - Superstore].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore].[none:Category:nk]</field>
            <field>[Sample - Superstore].[none:City:nk]</field>
            <field>[Sample - Superstore].[none:State:nk]</field>
            <field>[Sample - Superstore].[none:Sub-Category:nk]</field>
            <field>[Sample - Superstore].[sum:Profit:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Profit Map'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Profits by State' />
      </viewpoints>
      <active id='8' />
    </window>
    <window class='dashboard' maximized='true' name='Exploration of Losses'>
      <viewpoints />
      <active id='4' />
    </window>
    <window class='worksheet' name='Filter Tables City'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore].[none:Category:nk]</field>
            <field>[Sample - Superstore].[none:City:nk]</field>
            <field>[Sample - Superstore].[none:State:nk]</field>
            <field>[Sample - Superstore].[none:Sub-Category:nk]</field>
            <field>[Sample - Superstore].[sum:Profit:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Exploration of Losses' width='192'>
      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
      +6sAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Profit City' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Profit Map' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nO2dW5Mkx3Xf/3mpW9/mujO7s4sFSAIkQFK8WLboECmbsiMkWi96UPjFH8EP
      /hj+QHqVwhEWZZG05AAdIEDSABfALoDdmZ1r3+qamX7Iyuqs6uqZ2dvs9HT+IiZmprsqq6r7
      nMyT55w8SZRSCg7HikJf9w04HK8TpwCOlcYpgGOlcQrgWGl4mqav+x4uhRACjLFX0rZSCpN4
      iufxB1BCwOj596WUAiGk+l8qBQLUXrvMPRJCqns05xaiQNtd+56H6WSKfr8PIcQzPVvzfp+F
      oijAOa+1Zd9vE/uZLovneQtlQUqJLMtqr1FKoZRqvQ4PguCZLv66SNMUr+pelVJI8wzD8ei5
      zo/8EFCq+qDbMF+0kBJJnsJnHnzPq65vflNKQSlFURSV0CRZCgkFRil85oFSPXAXokCa51CW
      CpjrMMZxenZWUwBbsJuCad932zFt5zZfM8+fJElNCdquYY5vct41Pc8DIQRRFNUUSimFLMuq
      a0spa22oxndjnzu7yxWGEIJ+t4fxdFJ9eJfBYxyccRACEEKrtgDdExFCal+gkAJpnunXGh1i
      FEXwfR9JkiAtv0wFhawoIEsBF1ICXLeViwKFKAACENSFoe357BGkKVz2uUYoTTtSyjlBbZ5n
      9+KUUggh5gTU/izsNpr3a9+DfZ+MMfT7/blnM0ynU0gp567Vdk0bpwAllFLcubWL/aOnKIoC
      UAq4wAxglIG2HGN/CZUgKYXECD8AIQWyAvC5h36/DwWFp8dH8DyOvCh0r90wbgghSLIMjFIU
      QswpkTnGPq2tN28qZ/Pe7XObpkabgjV7WNN+mqbgnKMoCiilqhG8TejN/bSZRKZTmkwmiKKo
      upYQAnme10y8NnPnvOe8UQqQpCkC339u+xVAJdCUMXiMI8nShe3lIgclfmtvZ/6227V7NKkU
      iJLwfR9SKRweH0IqhbzIAdS/tM21dYRBiNFkjEk8RSHrwq+U0qNAy22a63HOK+E/z0xrXrvZ
      1qJzbDjnSJIEjDFIKSslaJ5nf1Zt7TRHrCzLkGVZJeS2qWMff5k5jDn2RilAlmWQUiAKo0sr
      gVIKRVFAll9uXvZWQoiqJ1uEKL+ART2aTS7qAgAAgReAUG3A2C00h+3xdALO9ZwhTghUo5dk
      lMLnPgqhn0MqWTufMYY8zyGlRBiGlfA0ldX+uymczzJRZYzNmTHmHjjnl5pPND8L+56aSmzM
      tEUT7rZrmNHmRilAr9dFHMcQQtQmYYsYTyaI0xhJqnv5W5tbuLW5hePTU21fPwM1c6dUHNue
      bn5pSin4vo8wCDGNp7U22oTh6OQI3U4X64M1cO5hMp1gmuhnBQgoIfC5nlQneQqlFDqdDh58
      +ikoIaCMIUkSvPP22612un2vtilyUS9t32NzJLSVwIwGiybYF7XV7FQWzWPa2jzv3smy5AK9
      Ci/QNIlxdHJcfVjrgzUMen3keY6Do6fVqEAJhe97SBouY6UUKKEIPb/WA7UJUZyntfcA4Pb2
      DgghOBsOMU3jOTvW4HEP3U4H/W5v7vpHp8cgIOiEUdW7JmmKQhRzE/OnBwfwPQ+DwQBpluqe
      k1BwzsEYq+43z/Oqffv8i3rY80ZL22SxFcN+nxACIQQopc9sxjZHDfue7Dab97rSCgBoV+J4
      MgEA9DrdSogm0ymyPIPneehGHRRCYP/woLWNjh8CWCwolFL4gQ/OOOI4Rppl6Pd7CIMQaZpi
      Op0iL3Kkpf3vez5ubW2BEt1Tj6cT9Ht9sIY3RkqJvCgQ+P7cPUkpcTYaIk4SeB6H7wWQSuJg
      fx8b6xvgHsc0jhEGAUI/wOnpKcbjMe7cuQNCSDVxNc9x0aTyImwzpWl22b9NHOEy17DPs+/N
      nhsQQirTq/W6q64AwOV7sIOjQ2R5Nvd6N4havwhCCAaDQdXjDYdDKKXQ6/WqHlcIgdFohFE8
      ARTQ7/XQiTpVjKDtPp5lfmPuaf/wKRhj8LiHJ48fY2t7E9zzQAnFl198ge2tbYRhiCf7+7i7
      t1f51e3nsb1HixTiolHCvNdULtO+mTSf15bhk08+AQB84xvfaDWPAFQxlfX1dYxGI+zv7+Pe
      vXt63iflzZoDPC+X7W04oQD3kDaUQEhZ651tIU2zDEmaQAoBRhn6gz4IZi5I47/uBBGCIEC3
      03khL1bzuUxb25tbODk7hRAFbt+5g8dffYWd3R1ISDDG0e12IZVCkefag+NxpElSzSsWBZea
      n5E5pu1emjRte0ppLQ7TNg8wo8jJyQl6vR5u374NpRQePHgAABgMBjg9PYWUEvfv38fnn3+O
      N998Ex9++CGm0ynW19fx5Zdf4ujoCN/+9rddLtBlMRM5bVvPfNYgBLnItWvSOlZKiaIocHR6
      jPF0giRLkRU5zobD6ktWSsHzPXQ6HWxubKDX7V7Kffc8eJzj1uYWup0OKCHY2NzAF4++wOHh
      ITa3tpDkGQohsHfvHr568riaV9jC2dZz2z+XvT/72ItGXbttW+GEEPA8D0oppGkKz/NwdnaG
      LMtw9+5dbR6Wps/Tp08RxzHeeecdCCGQZToec3Bw4BTgWcilAAiB53nYXN9A4AfgjEEqhcDT
      8QDOuf5iAGSlJ4kQ7fdP8wyTeIrheFR9sYEfIAzDl9brnwchBFEYodftIghC3NrZwe7ubRBK
      kKQJJvEESins7Ozi8ePH1fO0tWMLr/13m0Xd9II1Bb+pSG3mkX0sAGxvb2N/fx9/+MMfMJ1O
      kaYpwjCE7/vauxaGmJRzO9/3IYTAgwcPwBjD2dkZKNWTfzcHuOz1sxSjyRhBOZnsd3sghCDN
      UhydHGNne0ebOYxhOBwizTPkopj78sIgxObaOoQUGE8m2NrYvPJnUUoHlcbTKdIsrbl8OeMI
      gxBSShweHNTsZXOuTdOGT/MMCjrCTSnVMQ6lkOQpGGPwmbdQWczkuzkHaN67uabtLTOjQ6fT
      ge/7GA6HVRQ7juOal8vGzQEuSeAHCPx5BQz8AOtr6+CMgXCOyUTnE9kmkYFSis21dTDGcHRy
      DI9xxEmCKAyv4hEqCCHwfR89QpBZ6RnG6zSNp+h2uuC+jziOEYbhnG3eFiSklIJRhkIWVc6T
      UQSlgKzIwQgFZ7xqp4k9ArQd03QVN5UpjmMA2kQyCYVt+UzmHGcCvSCEEHSjTtW7GMEY9Prw
      LE8OIQS9TrcSfkroXFbjVd934PvY3tycCREUPI+DUQYhCmxtbeL4+Lhm/6vSlBNSQEhR/Z8X
      BaSS8DwPoRcg9H0E3EOcJrO8JqVzopqmDnC+92jRHMO+J4MQAuPxeOHo0cQpwEtGCAFR9jjb
      G1q4fM/H3u5trPUHeHp8hDhNIKXAJJ62+vCvEkZZLQqslELo++CUASAIowjj8bgyS4SUuicv
      358kMQopqugzyl6ZEp3WHfg+kiythK8twn6RFd7mXrY7m6ZSNOco5vU2nAn0EpFSQipt/pwO
      zxD42q056A1Q5AWOz06RF3llv/ILFtJcBZRSbK1v4ODosOqhZ2aFxGBtDfuPH1exCwBArkcL
      Thm8UjGyIsc0SxBwH4zQKh/JYxwsZOUz60zVpgu1LaBlsyhwZr92Eabtptv1xo8ASqlK6F4l
      RVFgNBohTtPKNAh8H+v9NTBKcTYe1jI9GeOIOp1Xek+Xxfd8dKMOQMo8JkqqhTlSSfQHA5yc
      nFTR1MDzQQkFiBZwozQEBApauBljKEzqAyFglFbxDztaawtkUwma5o3BVoLzAm5t2B6pTqez
      AgoA7Sd+pddQCuPxWK/cUvrDZYyh15n59fvdvl5jAG12dDqdF07dflkQQkAZtXplAgmFNEsh
      hEAYRXh6+BSA7jU9xmtCGHmBtvu9AFLqVW9QgM/qKQ22Hd/Md2oTZHPcZU2aNldq83jTJqCD
      kDfeBKKEotftzUUdXxZKKUwmE0zT2VI8j3Nsrm/WFpMEpW9aKYWt9c1Wr8TrZNDtI88LxEmM
      rMgQJ4keqSiFF3ro9fqI4xhRFAFAzSsEAvDyWaXSUfG2SPFFZktzomt+2x6nywQKbRep3Ya9
      jsAcd+MVANAfbJwkCIIA7CUpQOVLn4wxSbTrzXh/ulFnLoA0mU4gpcJav//KFve/CMZF+yTP
      tHmDcq2EEMiLHFvbW3jy+An6vR42NzerSGuzp/VYe+DMtNf2uv3/ohHjMjRNqUWKZiumC4Q9
      J3Eca7On0HlBlBBsrm8gDGY+ffvDz4ui6iWvg9nThlIKw/EIUkqMpxPdkwNQUiEK9VLE6WSC
      4dkZdnZ2EARBtdDGnA/Mp3MDizNKm0LerCrRloC3SKHseYEt/HY2aFMpVmIEeFkopdN1hZSI
      k7gSfgBgjINzb673MUOvd4kFOq8bM4IVQpQR4tmquGkyBaMM3W4Xg34fj774AttbW5VZ1xaU
      Mm22/Q3Mr+SyaU5ym5Pj5kS4aXK1jS5tr1//b+UaYAR/MpnohSRKV3hgjEFJhV63i363V1vo
      Yb6USTydW8hynSGEgDOGQa+Po9OTmsAUosA0iTHo9tCJolrKwiI3ZpsZs8jWt99fpAB2FLrN
      ZLrs6GqOdQpwAUopJGmC49OT2bpdBXDuYX2wVubYt3+MhJClEn6DCd4B7avblFIgLWtwn8Ul
      eZGwNs0V8z9jrIqgZ1mGPM9b3aHnYccErpcr4pqhlMJ4MsHhyTGk0oWpNgbr8H29BHIaTyGe
      ce3wssAYQxgENcHS0V0tiJ7nVWnFtkC1pS60Ceci86ZJsz2T45Omae38Re7PZjvNe3AjQAtp
      lmEaTxEnsRZ8xsAoQ6/bRSeMEIYB4iRBlmU6Q9QPnqkHWgYIIdje2MKTpwe6/KJS6HW6APQk
      d3h2hjfeeKPqgc05wMXem8scZ7sym9jep/MiyOc9m7mGU4AGhShwfHqiF76AIAwCbG1sohAF
      vHJ1FCMMnTBCN+qUVRluLhtraxiVyWWD/gBSCAyHQ2xtbUFKWRWlanpqbJqT4kVLK+1j2iax
      9kjTbHuRsrUpysrFAS6LUqrs0YCdrVvwPA4CguPTEwx69bJ8ZsJ7mfIrywohBGEQVq5dpRQI
      Y+j1eojjuKoesUhg7b8XBbPOC4g1j7F/n+dBusxzVfe96nEAYxueDM+Qpim2Nzfh8fZFGzfN
      zLkMJo3EVMswVd6S0gQE6hPaRf7/Nh98/ViCNE9BoNdYXNROG23XAGZxAHOMrYw3t/u6BEJK
      HBweQEiJQa+PtV5/ribNKgq9jZlwAnq1Fee8Mn2Adp88gLKmkqoV7j1vTlAJ7jkT2ebxzb8v
      c05TQVbSC5TlulKDEAKFEPA9r/JrX7ccndeNX65XoJRWC3ya5Q3bvDFxlkBY5RcXeWjsNgLP
      hxTyUkLdNkLYtn1blLg5mq+kF6goChydHAPQWZkbgzV0oo4T/AWYRf7G3gfKuUEYIo7jWtKZ
      EbK0yCGVhChHCs4YKJmv9mb+N+njjDL45TJMRUm15sCUZgHq6RZ2O3bk3Z5g1+z9lonwSiiA
      lBJZniHwA5wMTxGFEdb6AwDOxLkII+x5niOOY/R6veo1SinSNK0ph06XZhBSIBc5Au5Xa4Cb
      zHpkgqzIEXBdesbzfUymE1BGkZV5RoHnt57b7PHPmxi3zUVutAIopZDlGbI8h5KqjMz2r00e
      /rLAOUcQBHMVpU1dHtsbBOjKEr5USAudWbpoEmzOYYQg9HykeYaA6FSMXqeLaRLriG+hYw1t
      maZtkWq77TZTyH5/6cf9oiiqlVYAqqCNUjrvW0iJXkcncAV+MBfddFwMIUSvniqrStuve56H
      oOUzndXiPN8WN68RQhCWAUWT8tAJI4hys5KsmC/Yu0jwm8fZ/zePWSoFUErX7TfBlyRNcHR6
      jLPREJPpFGmWIcvy6gM1H6IT+BeHEL03V5IkNWGiVFe3aCoBga4NJFsEz9jqwPmCSinVuVTK
      2rhkQeXoNvfqojKL5v+ligMMRyMUokAhBBil6Ha6ELKcYFEKISQYo1W01vFqaKvEoNQsW9au
      AKeUqnKoFpkj9iS1LeZiAl5xEoOWKSmMsarg1qK27NfyPK88WM17WJo5AKUUspDod7sIg/lS
      gt7SPMly0+YtI4TUyo/bv+2jFVAJrm2+nLc+2LwX+AGmcYyM5uCUIWosPGoqZNt8o/V5Lvnc
      rx2Pc2xvbD3T9keOq8WsFzbUszR1/EW0VJRr2vBtNj2lFJQzKCkhlIRoVN5r8/Ever/W7uUf
      z+E4H8bYueudKaXVZLY5WrRVf2h6nULf1xt9FGJOwJuT4abff5GCOMPB8cIopaqdboIgQBAE
      yLKs2mWmcpsyXq2Lbp5vaEtDMW1QQuFxBsCHKGbl0YH5/YwXeYvs9gCnAI6XACGk2uQ7Kcup
      LIrA2rlBhrYqcYtNGJ0ykWYpVK7ge/5cklzbuU1lqgJnL/74DocWYpMsZ9zVdnS2KZT2trFN
      m992kZp4DgBM0riqLRr4AQhIzdVpt9f2mv1T3ffzPrDD0cT3ffT7uio2IUTXSRWF3iSwEX3P
      iry2z7LtuVnk5w+9ALysNrfomIsCYHMBuxd7ZIejDqUU3W4Xk8kEk3iKvFSAbqdb1RECgNDT
      gbPmlqltsQHGdHHdZvEBE+y0sf83imLmB7bwV/GMZQmEXbfCWI7zkVJiOp1Wi2YAnTsUhmG1
      sB24/DpiG9uON0GutvNMm0VR1PZqsM93I4DjlWBGAsYY8jyvtlkqigIfffQRHnz+JT59OqmV
      mgGARfJPZYbbe7tQosD333kTnq8F2kyqCalPr9siz204BXC8Mkz+kOd5GI1GYIyVewErTJIM
      X4wpRmJ+e6imLa+UQpAnuP8n7yEbn2B9YwP9fh8Kyog/CNDqYjU0M1JN+04BHK8cxhh+/cFH
      YERhd+cWuMcRBRzp5BSyxaylqBevKv+Cgi69Pk2mIEyLPqOsigoH3Acv65m2JcfZwTJdxZo5
      BXBcDV+dJvgfHx6h7z1E5HN0MUaQHiIJtjHLEkJlxtRs+trEmEJJNdeTA9DrD/ywyhy1aXqY
      GGE3Yz2A4/pDCMFPfvguAIlT0cHj2MeDoQfeWZsLiy1yb+rdZ4BwbQsPnpwAACgIfNbYUrX8
      bdYj27EIIQWSLEVaZEjyDNMscQrguBru3tnFTo9Vk17l9ZAVJoh1vudH997a0qeU4nCSI0v1
      fsRSyVqPL9RsWyZArzc2GaiUUL1tK6HwOUfkBU4BHFcD5xzfu78OClnKO8Ek3KutFzNi3La0
      EeXqMgUguvMWfvnxY2RZhkwUUArlHmR6Hwa9ElAgzhIUUug9Dqw5hVECZwI5rpR339oFl2ll
      zki7ZhDOrxin36fVb3/nTfzqN59geDbU1SMYr9YMZ0VebdRttnXNRFHuYl9fK+AUwHFlMEqh
      pKxNaivIzOPTmghHiDaDrCgx2/sWPn70BACQ5TkKKUtPkYDHdHCMEQrf8xF6frW7pR18cwrg
      uDLeeus+/qLzL/hZ51dYE4fV6wSYbaEKAEqCFDGQjaufOE6QTif1BglBv2PiCAqqtP/Nskm7
      UBZQrzi9UnWBHNeDKIzw3a0UX9+Ikf/hY/x9sgGvGIJDICMBemqEXX6GH20c4G4nxXooq0X1
      Sin84qFC8a2fgVaeH/1+PI0RdaJq/TEt5wOUUlBCoJSEQj0XqCpufOWfgmNlSdIEPtc9/l/c
      O8Wdw/+Jd9YTeBSY5BS7XQWPWQEr61wCgrdPf4uP8v9QKQCUwpNRjoeHD/CXP/oOQAh87uk9
      zopMb2UFCVUoRGV8YGkXxTuWn9FwiIhJKABrIcGP76ZV+dzNDgCQqpJEEwWF3/vfhxd2qtco
      4wj33gZPYzz66gBv378HSiikKsrNuvVaZEKAOI0RcB+5KMAoAy2DYm4O4LgypuMRelaFw0rM
      CWl1h9r/P409ZDt/1NouDyJ8fprg6OwUUkkACuPRGKIQoIyCUP1DKUUUhLrkosgh4bJBHVdI
      HE/hs1nag6GapC44jxCC94tvItq8U0YC5gNnbPs+fv37jxAFPhJFERfAVkjwg3e/Nnctj+lV
      a1mROwVwXB0qHZXuzJZ0B1h1gxqvA8Be/hk+no7gdfpz5xro3reQMwamgB6A+ODB7NrlnIKZ
      yS9jKIRwJpDj6iDJUSXQTTtfAXNJbHZwzCMFCOPnJk1QygCFKtBWb0sv0ayWXoIg8gM3Ajiu
      BqUUyPDRwvfnskAbCpIIpgW85TwzctQzSOvHcab3GXBeIMdrYTQaIRw/ALrn7wusabP0VWU+
      zY0CC9qzFcP0/kCj9OKzPITD8byMTo/QY6n1irJ+UEtYM9Wga7lBwEJBn2XRadPKriHEKEPA
      tespzpLqffPjFMBxJaxv3cIo51WuDyUUJgnCYJTgWao0KKUqc0dWSyQ11MobCrgPn3u1fKJC
      FM4EclwNQRhhn76Bs4PPURknhBjLxnKFEigyb+t/PqQ4evQAtFH+XpWjSFvFuU4xrpZMcsZB
      y/7eZIN63HMK4LgaOGPo3f8+7rG16jXtrZn14CDAPz70kH79P+p/tWZAQtvq26iPEJQQFHmO
      8f5n2Ln/dWSTMfxOtxwHFNTxV+CMVavDTJv2304BHFcG7WzDFw9x3gowxhh4Y0M82qjtCVj1
      hAAwxvU5+QQ0FiBr21AKEGXmJyVE7z/m+bUd5l0gzHFlKKVARIo54TfJOo132nZ8MX/XFrVY
      EwYR9tHPTnB4AnTWt5HkEu9/9LsyBqBA0yHWWFKuPQCEdHMAxxWhlEJ+9hBYa1SAsPKA9NJH
      6++FjZVy35gtB/11HB9n8IIOFIDu3luYmhNAUHzwt/jJxm+r46WrDOe4KoQQ8FVcRWktz2WF
      7dG5CO3fx9yAEm7c0kpl7w9QZpk2RxjAxQEcV4TneVj7+o8xSecT3+xkOGW9pye8F2iEmh1r
      NWi/US6pbLarcQrguDLuvfVN7Ke9WU9M7BSGmRLYo0NbpYj6hHhRUV1StW1GgTZdcgrguFKI
      17PyffQvatsy9uYVhOi4QDkSmMmv6cFr0eNnwB6DnAI4rgxCCKKNu8gL2Z7qAGAvSpAOj2uV
      3lR1RL0StKkXVDOnUBdw3YSaKZFS9hTcKYDjavnGez/EY3kPUtZNF/P7mzsM745/jmx4OKvn
      uaCtljkwalE1oDZaGO+RfYRTAMeVQinFG9/9M3x2VOCr46T2nunV377F8YPsF0gOH5ZhgrIm
      EExm5+XNHmLFGGbKNBsjnAI4rpxet4et9/4TfvXxsHXjOgC4t87wI/I+sv2PAczqBgHzmaJA
      s5yimhsZlG7EMqc0TgEcVw4hBLfvvoGv3d2uenhg3qTZXfPwk/BDFI9/a7lKWxRGla+jVBRT
      ZMtSmNpE274Xt0eY43WglMLDTz6E/OqfcKs/y9I0a7xsoZwkBf7heA/s/h8DJoEOWthFnuLp
      P/0tNgbd+gVaIsnZ6Vf44b3ZtdweYY7XBiEE99/+Dn5z8Cm2sd9Y0lgvYNUNOX669Rg/f/i/
      gTf+pNaRK6nw/ZNf4t3JsLabjG0yGR7s/Fvc//P/qo8ok+GcCeR4rRC/qze7VnW3pR0cIwCi
      gOHfbR+APvqlNptAIPIMyfAYBOVKMH020CL8c9clerWYUwDHa4MQgm/94M/wcBRVJkvdIie1
      kSH0GX66cwT/0S9ACMH00/+L7/7jf8dbfAignBwbE+oSlr2rDOd47Xieh6/967/Gl+Ogvo9X
      Q4CNG9TjFD+9fQL/0f+CIgy7PENA50uqtIs/qXaoT/PMrQl2XA96/QG6b/4Yp1NRLVonpedm
      5iGyvDqU4Cc7Jxgkj5ComQjPzCDj7S+NIjuPCHpxDCUU3JlAjuvCzp17OI1LDw20MLcFvEww
      i1OCP31TYUwWewaVqq8g0zvJMF0QizEouBHAcU3wPA9rb/97PFTv4LPxAHkhq8mt+VHW6EAI
      waAbIN57B5mc+fub1JPmCHJRIBM54ixFnKVOARzXA0IIWNjDqAgQ3v1XOF3/MT4ZrpWlDk0B
      CbPJtf7JCwm1/yV8Ohsp5pOiZ9XjhBTIRWGZUyYOkE3wzx/8Hnt37+Pu7e3WG5yMR2AUKGiE
      Xnhx+KBIp/jggw9Aow18571vglPg+Ok++pu78JDhi4MT3Luz+zyfleOGcnfvLvbu7FW2/snO
      Hh599nt0R7/BVhfQ7s3yYAKMpxm6+QiSq1oNIDNyGJobahdCANBVorUkywK9jdvY21nHJw8+
      BaQAhQALOjjefwzJImz1I4hiiK+mHdwZcKx3fEzzAsdjAZIc4pOHT/GXf/VX6AW6SR50cHf3
      Fuj6Hj796P/g/f/3BP/me1/Doyf72Fzfxjie4u/f/wVU7w52IgHV3cEPvv32K/6IHcvAcHiG
      wWANo9EI73znj3F0cAfDz/8Oa1Hdv392NkGHiNZs0UpPStvfXhyjlN5VklcKAOOGJTja/xKJ
      5Hjjzg7efGMPIpfgEEizDLd2b+Pp50Nk0yE+fjLB7t5t3Hvzazj6fIr33v0WPF63qMzNTlOB
      3fUeBKFQQpaJSQTrWzvYuH0PgZrisyenL/MzdCwphBAMBrp20K1bO/A8D7fvvol//m0PR2cH
      yARAvA4Ij3BwlOMtwkCpANCIIZR2T7XzJMxewqRWIc7lAjmWgul0ijRN4fu6ZhAhBIcH+3jy
      L38H/OEX2CsOEFoF5eyVY2Y0+PT2n+Ldv/lvYGx2oMsFciwFYRhCSoksy6rXNra2sfmz/4K8
      +M94+PFvEX/0c0Rf/hq7ZAROZra/mfDScvvUg4ODyjpxCuBYCiil4JzXFIAxBs45PM/D19/9
      I5D3vofpZIIvf/c+0o/+Ab3D34GrHMYeGiUF9vf3AQC7u9oB40wgx9KglMLZ2RmE0DZ/FEXo
      dDrVxtej0UhHkMsN8U5PTlAUBUxiBGMcUadTmVFCCDcCOJYHQgi63S6GQ538lmUZoiiqhN4o
      QlEUIISg16/vJyalhJQSQohKiVwgzLFUcM7B+Xy/TQhBFEW1vJ+iKFAURSXwSs0cz+YAAARd
      SURBVCkURQEp5Syv6Erv3uF4QQgh8Dy9R4CUEkmSVALveR4opXOBL/O3lLL2v0uHdlxr2hbL
      AzPbHwDiOMZ0OkWSJKCUwvf9hYthjJlUe+3l37bD8XIwNn0TY+70ej0AQJIk1XHN45v7CjRx
      CuC4tlBKa0GrJr7vo9PpgBCCOI5RFAWiKEK3260JvF0hwsYtiHEsJUopZJle0cU5rzw/k8kE
      jDH4vo9+vz/X+ydJMqcIzg3qWDoIIeCcI45jCCF0KjVjlZvTKAGlFJPJBHmeV7EBxlhtkuxG
      AMdSYia8eZ7XtlMajUaVm9PzvJpnyPf9yv/v3KCOpYdzjsFggCAIKoGWUmI6nVY9fBRFCMOw
      +j/P88p8AlwqhOMGYLxF0+kUWZaBEIIwDCtXqUmiOzs7A6WzynCM3ZBF8Uuiw45XhJkD9Hq9
      Kjcoy7LKJWrsf865FnpKIcu9g2+EAixycTlWC9PzmwmxSX8w75ne38wHsiy7GQrQxkWl8Rw3
      nziOq789z6vmC4YbYwI9D26EWF7O++7sSHBRFHPrBzplOnRVfOuV3uk1xo0Qy8t53x2lFJ1O
      B4yxanJsXJ/m3E6ngyAIwDl3XiDHzUQphSRJEMcxGGMYDAY1xVFKIY7j1R0BzmNJ+gTHOZgJ
      cRRFEEIgSZK596MocgrQxiKvklOM5cIoQXN9gP2+ywW6JG7OsLwMBoPKBdrEjQDPiZlgpWnq
      RoZrjAmSLVwkc8X3c2Owdx83/7ct3nBcb5wCPCcmtTYMwlomoh19dFx/3BzgJaFrWg4AoFqo
      zThD4DvX7XXGjQAvEbP0LgxDeJ6Hwo0G1x6nAK8AsxgjCkKMx2NkeXbxSY7XglOAV0hRFIiT
      BKenZ7VwvOP64BTgFWLyUbjPXRzhNXCZ4KXLBXqFmC9gURDG8WoRQlTrgRfhvECvkEX1aBwv
      B3sxfBvn1RQyuK7JsbS8jM7FKYBjpVkZBXDZnI42VkYBHI42VmYS7CajjjbcCOBYaZwCOFYa
      pwCOlcYpgGOlcQrgWGmcAjhWGqcAjpXGKYBjpXEK4FhpnAI4VhqnAI6VximAY6VxCuBYCRal
      w69MNqhjtXG1QR2OFpwCOFYapwCOlcYpgGOlcQrgWGmcAjhWGqcAjpXGKYBjpXEK4FhpnAI4
      VhqnAM+JK7N4M3AK8JyY3BJXc3S5cQrwgjjhX25cNugL4nZ/WW7ct+dYaZwCvGTcnGC5cArw
      kimKwinAEuHmAC8Zz/Ne9y04noGlGgFcz+p42SyVAgBOCRwvl6VSgOu2765TxuVnqRTA4XjZ
      OAV4Aa7TaOR4PpwCOFYapwCOlcYpgGOlubEK4FISHJfhxiqAm6A6LsONVQDg+iiBG42uLzdS
      AYywOaFzXMTSK0CbkJue/7qMANctgu2YsfQK4ATL8SIsvQJcZ5ztf/1x6wFeIW50uv64EcCx
      0jgFcKw0TgEcK41TgBuMm4RfDE/T9HXfw6XI8/x134LjBvL/AVC+AEkXxnKOAAAAAElFTkSu
      QmCC
    </thumbnail>
    <thumbnail height='192' name='Profit Region Sub Category' width='192'>
      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
      xlEAh4XmPwJa8DWz8+z+bQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Profit Region and Category' width='192'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='147' name='Profit by Category' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAACTCAYAAADYxhZeAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAPrUlEQVR4nO3df1xUdb7H8dc2d3RQMhrchwGuYvjoB7gut0lQysUerLLrlewue80wXU1l
      kgwvZmW2G2Bl3S6lyyY9mCv5o83MNLLxToWxytWHm+0dLxaQ+BBEVscspMkUxuZx9P4xIL8G
      BnMI4ft5Ph7+4eHMOd8zj/Oe8z0/Pt/zk0uXLl1CCEVd19sNEKI3SQCE0iQAQmkSAKE0CYBQ
      mgRAKE0CIJQmARBKkwAIpUkAhNIkAEJpEgChNAmAUJoEQChNAiCUJgEQSpMACKVJAITSJABC
      aRIAoTQJgFCaBEAoTQIglCYBEEqTAAilSQCE0iQAQmkSAMU1NDT0dhN6lQRAKE0CIJT2T73d
      ANH7pq/Y0ttN6DVyBBBKU+MIYLdgttg7TA6ZlklWUuiP0QAsZishmVn8KKsT3aZGAABMqeSn
      mnpr5aTmt1u33YLZburFNgmQLpBQnAQAvHeRHFaysqw4Ws2TZXWA9jX78p9isTkLqwPAjiVr
      B4cPF5H//FIWm82YF2eyuexc6xVgMVvwrMGBNcvsWZ/dgtls9vxrXv9VtQU4dwRr7tMsSTNj
      TlvCyvy9nND89D31Q+p0gfyinv1573Ag/EFWPhSFUd80+dQu3ipJZPrcVSwIM3Dx+Ls8v7qQ
      ijWzieywjFCSsvJJuuoukLe2OLDlbqNx+mPkpBvRu+spL1xL7obryZ4fTcAPXFN/pk4A7BbM
      5raTTKn5XMn+59zzDl+kPM5jpsC2fwhJxGxOovn8VjdyPKagnTReVYN/QFuq9nE4ag5Lo4ye
      /+uNRM2Yx13PbMfeGM3dkoAO1AmAH06CB945i7ntd/5e4q0tzpoaKm3FmG3t5w5h2jcgh4CO
      1AmAHwQEBqLr7UY08daWCxcu/IiXdvsHOQnuR4aFh+MsK+NMbzekD5EAAAQFEeQ4TrVLA81F
      3dES1q/7mK96cp3BwQRX2vn0Ww3QcLncV9+WW+OI++498raWU+/Gs9y6o5QUFFLaYxvSt0kX
      CCBiKrNveYU/Lf0IFwaGjoolaVo8x9/vwXWGJzJ30uusfzqNAreewb9M5ZVZY6+uLboIkp9M
      x7bxDbKX1OHSdBiGjiI2aTZxPbgpfdlPLl26dKm3GyF6T0NDAw8815NJv7ZJF0goTY4Aimto
      aGDQoEG93YxeI0cAoTQJgFCaBEAoTQIglCb3AYTUBAuhKv8eAc4doejNd/jw81rOu0E/eASm
      GfN5cPxN6NvOyBHr66z/yHPLvuUBrrbTPY8rO7BmZXMq6coeXb6SNltf38jHh+twaaAfPIyR
      d05l9r+N5ya974/7lcNKlgVSs1oerbZbzFhD5AG3nuK/ADSWUpC5jtNxi1iRcxtDDeA6+Xfe
      fO05Xvx6OSuShrc8vejYzWb7cBbmPMLNhlbPNFYUkmcfTnqb6Z4Ckh6hVbF1VT6nE5ewatEI
      Bus1XHXHOFC0jZLy8dwf3TOrvRKm1Hykarjn+K0LVGPbSkV0Gk8mRzHUoAN0GMLGM3/5TIZ8
      9DZ7na1mPnWKU6Ej2+78AI2NBJnGd5zeUyr3sz9oKrPjRzBYj6fNQ0cTn7L8mtj5Rc/z0xGg
      ik8/HcCkJZEdn5cPnEDCuG3Y7E4mJTRgzcpm5ykA++UKrZBpqZjslpbpOz3TW7pAFkhtNaSI
      9i2H3rOwZfdR6t06DGHjmPPIPEzB0NyN2vjxYepcYAj7Bb97aAETh3sJ1ZAhDDnzFV9pENRZ
      5rx0Szw1vnZM+ameX2eHlazC6/j1jRXs2H+UerceY1Qi8x5K4pbAVsvxNY8XdosZu6l198/H
      9mknKF77Gu8fbn4Y7jZ+9fuHSOpqJQrzTwC0M5xxhhLjtZuqIyJiFI5jDiCy83rYJM/0LMc0
      H/1djYrNK9nkvJelOUsJM1yk/uhuDtcBweCw5bKtcTqP5aRj1LupLy9kbe4Grs+eT3T7iqjh
      CUyPyGTNU1+S8Nsk7jGNbqnzvVLVhzk5K4XM+8MwXGyqxS24kReX3E3glczjg6/tc9jWsfen
      KWQuisKod3O+9nM+rD4Jt9z6Azesf+t7l0FLN/BqYwp5jzaHR4dx9BTP477OYv6y4zjHyeWp
      4rYfe+/j3xDdIViBmFJfvtzH1lwnOfj+VrbsPsfE5StI8nbU6Mytk0i+I6ypSUaiZvyReZZ/
      p7DibmZHXsE8XenG9oWaJnHDGgvPVUdgGhtD7IRo7ptk6P52KMY/AdAFExzkwOEAU4cfb42q
      qmOEDvfTVYwBAxjQ2d8uXOBCyDQy23RXuk9nCOOO5AxGXv8Cz+6uJKlbe2VXBjJwoD/madKd
      7QudRMZLd3H+9HGOHDqE7c9v8dWtZp5OiZSSYC/8dBIcQUzM9+wprqDDEDTn/kbx339GjCnI
      P6saNYpRNVVUeRvrZlg44c4yyrpbE6hpHdsLDBo0iO+///4qGgloZZRVDqfL3Hdnnta6vX16
      Bg8bzT9PSSY9O52xh/ZR0c1VqMZvV4HCp84gsjSP/9heTp2rqczv5CcUvLiFs4n3M9FP+z8B
      E5h8+wHy8ko46dIAN+drS9hfCXArcXHf8V7eVso9NYForjqOlhRQ6K0msHQTK/OtHKw9j2du
      z7LWFdYyYcLPPfPceCM3Ok9wrN7d9PeDbM/dxmftl+U+z1mXJ07u+nKsazZRO+lfiQ24wnm6
      5Hv7SgvzKCr33NMAN/XldioHBBPc3VUoxn/nAAHRzM9Op+jNd1i1rPWNsD+wfPxNfhxNQUdk
      yjMstG3k1WWbqXfrGTzCxKyH4wEdEclPkm7byBvZS6hzaegMQxkVm8RsbzWBY3/DdMcOPvjz
      CtaddaGhZ/CwW7hn4TNMva2pxQETSE46yNpnFrPJrWfwiJ/z6+TJRJUfbbus6g/IWbGV0+fd
      6AxDue1XC8hofe+ju/P42HZf2zf6jigqtq7mybV1uDTPdzMzfQ7h3f+ClSIFMf7gsJK1M5Ss
      rm5Vd2eeXiAlkUIorO9dBhV+t2PVzN5uQq+RLpDipCZYCIVJAITSJABCaXISLKQkUghV9Z0j
      QCevOm3ml3Hxf8SbVQ5rFhZSpdSxl/WdAJhSyb9cGemlSEaIH0C6QEJpfecI0G2+SiI1vj30
      HpYtuzla70ZnCGPcnEeYZ2p+XtLNl59s5g3rAY7VueCG20hOTyeh+fN2C1knfsnMgBK2f/g5
      tefd6G+K5+HHUxgT6K0NGnpjFInzfJUlanz96SYsW+zUnm9q16xFzIn5aauH5c5xpOhNtvz3
      IU42PwgXMZiwu1aQYoIzRS/w8ncPsCo5vM1yyzY+wf4xL5FqulZe8HTt6HcB8FUyqFVsZuUm
      J/cuzWFpmIGL9UfZ3VxPCVD6LhsC/4XfPZbDaON1fPuJhczNezA9kUDzE92ndr1FSeJ05q5a
      QJjhIsfffZ7VhRWsaSqgcdhWs+5INL/PXESU8Tpc1cWsXZvDjow/Mr2TKrPG0g385/vw28dy
      GBdm4GL9Qba88iIWslkUEwhonLCuZu3nkaRm/okoox7NVcdf857mWNMygifGE/KHEsruC2fM
      5byXsv+zscQ9KDu/N/2sC1TFvsNRzJnR/N5cPcaoGcy76zgl9kagkb/t+oLYtDTiwwzoAL1x
      NFPiWtXLRt/P8pR4Rhv1gI4bxscQ2dBAQ6u1hCSaMSfdQZhBB+gZOd5EUGPzS1ErKC4O4r60
      JKKalmG4eQppycHsspV6LcABJ/uLqohdMJ/xl9t1B7MXxPEP227PC7K1Umx7hjEnI7lpuaAz
      DMXY+qASEMs9Yz9j94GWF7RqpXYqo8e1BEK00b+OAM4aaiptFHd8Tygh074BvqKyMpzoJT24
      N5yuoeb6cBLaFbkEREYyosjBaUxeyhlrqKkJJzq83eTw27nduY9TQOhpB47R0czvsnhGx5j4
      ON62/h+NcXEEoFFqryE2IfXqtqkf618B8Fkz62RApwXFfYBO57t4JnwSE89Z2HsmjilBpdj/
      YWJKxI/RuL6pf3WBfNbMjmLUqBqqvBYU+7EN31VTfa7t5MaKCmpDQxnm9UPhhId7aVfNF3wR
      FEIIeEozq6qo8tmAYCbGB7J3Tw1aqZ3TMROkGqwL/SsAPmtmA5gw+XYO5OVRctKFBrjP11Li
      KSj2k0gSEs7yfr61qQ0aruoi8rafYfLU6E5+wYOImxLB/67fwCfN7ao/yBvr9vOzqfd4jmYB
      Ju6OOMD6Nw56XoGquTh5cDt7vDQ9IPYeRts/oGCfk9g4uVHSlf7VBepGzawuMoVnFtrY+Ooy
      Nte7PXXLsx4m3o+tCJ2awQLtdTY2tUFvjCLRvKzLcYYCoufy+PebsLy8jPWXL4MuJzWm+Sw3
      ANP8DJxrXyN7ST4uDISNewDTzXCyw9cwhnjTZl6oSmCGVMN3SQpi+ji7JY3SmDzmtxvL9EzR
      S2wOfJRH47oeckJqgkUfcZoDha2GcNFc1JVvxVYZTXS7UQ/dX/6Vv/xPCAndH29FWXIE6DM0
      vv70bTbs8Nyh1vAM0XLvgw8xaWTzgKaedyl88E0Ydy9cSsoY3yOOql4SKQFQnOoB6GcnweKH
      aGho8D1TPyUBEEofAeQkWChNAiCUJgEQSpMACKXJZVChNDkCCKVJAITSJABCaRIAoTQJgFCa
      BEAoTQIg2jh3xEruU4sxm80sfioX65F2xc12C1lWR7tPObA9+wQWe7t5+wAJgGjhsLE6t5SR
      C3PIy88jZ+FISnNXY2u/v7ehccJawJ5h95Ni8l1/cK2RAIgmGmW7ihkyM4PpNxvQocNw83Qy
      Zg6heFdZJwN6gXbCxvq9oaTMNtH3dn8JgLishoqKEZja/YoHmkyMqKigxttHtBPsXLeH8Llz
      ie6j1ZcSANHEifOCEWP7HTnAiPGCE2eH+TWqtudxIDKNlMi+O+6iFMSIFkFBlwcAbjWRoHYT
      T+3MxrwTGHgn5pcjfI9Wdw2TI4Bo4fT2S+/E2W5iyLRM8vPXsOgXh9lWWNXp+UFfIAEQTYII
      GlhPfWO7yY311A/0dmQIIHpuBhMq8ynog5c/m0kARJNwIiNrsbfbmc/Z7dRGRnofX1Q3nKS0
      RJzrfV0qvXZJAEQTHWMmJ3B2y2p2VLvQ0HBV72D1lrMkTB7TeT8/OIG0ecPYU2DlRB/sC8lJ
      sGgROpWMdI3X/2sZafVuz5im6RlM9TG+bqBpPuknnmV1QSjZqX3rfoBUhAmlSRdIKE0CIJQm
      ARBKkwAIpUkAhNIkAEJpEgChNAmAUJoEQChNAiCUJgEQSpMACKVJAITSJABCaRIAoTQJgFCa
      BEAoTQIglCYBEEqTAAilSQCE0iQAQmkSAKE0CYBQmgRAKE0CIJQmARBKkwAIpUkAhNIkAEJp
      EgChNAmAUJoEQChNAiCUJgEQSvt/QMkXIRCvb0YAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='167' name='Profit by Region' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAACnCAYAAABHLVPlAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAPKklEQVR4nO3dfVSU55nH8W8zss5EsAi2VGApCDoWMeU4WzHWSBKi9hAnNiFNXbMaX7Iz
      lT2JMSGtx0SBJjXbNUrMUVMmIkk01JjYHoXSqiErXY8r5EyWbAgJJLzIwlgELStvo+zE/WN4
      F1BTmbf7+vylM88wN+c8P+7reWau+/7G1atXryKEom5z9wCEcCcJgFCaBEAoTQIglCYBEEqT
      AAilSQCE0iQAQmkSAKE0CYBQmgRAKE0CIJQmARBKkwAIpUkAhNIkAEJpEgChNAmAUJoEQChN
      AiCUJgEQSpMACKVJAITSJABCaRIAoTQJgFCaBEAoTQIwxjo7O909hDHX1tbm7iF8bRIAoTQJ
      gFDaOHcPQAVLNx109xDECGQGEErzkBmgnarjb/Punz6hvqMbjXYyUQkPsWa5gWB3D21UNvIz
      LGDKwBjq7rGIr8MDAtCO1ZJOXtvdrNn0GDMma8HeyMdHP6cJbl0AbPk4z1Ujcq6KXm4PgKP8
      MPttC0jbbCRc0/OgNozZj4S5dVxCDW4OgIOy0yVE3be9/+Qf9rBmSt+ycNBaT0e3H0Ex9/Do
      uhTi/Huet1rIaFjAMl0xh3vKKL/vJPKzZ5cT5w9WixmL1XloprnA+Y8pS0jPMBKKjfyMAkIz
      TOirDrN7dxE1M9eSbTLgaC7lnTeOUFLbgt0BfkEx3PPoOlL63lh4OzcH4BwNDd9m6hLdKMd0
      UfbGLkpiTGxdGYYWO42nXmdnViFPbU7uK2fOnfgtxYuXsmrr44Rpv+Ls735F1u8reGVFLAZT
      NtnXKYG6qg/z6tut3PvzHaSFaQFoqWkkIMnM1lkRTPBzYG8sJntHLqdffIJ5ow1ZeA033wVq
      oqkplNDRivIuK8VX7ic1MQytBtBoCUtM5eHJxZyq7j9symIzZuNswrQawI/vzjUQ2NV1g+Oo
      5OjRv2PllrXMDdPSOxmFJDyIcXYEE/wANGjD7mW+vpnmC1/jVxUeyc0zQAghITZsNjCMFILa
      WmrLTpFqzrnmKcOcWzWOMO7/Z+O1ZVh7Fcfffpc/fVJPR/eA9zUA4bfqvYU7uTkAUwgPP8+p
      mi4IHaGmuHKFKwYT2SbDGI7DH/9ryvoLFO3ZS2W8iefXxBDk53zUajFjHcORCNdycwmkIdYQ
      T+37x2lwjHBIZCSRFeWUj/T8mKmjuvMuUhb1n/zC97j9k2CdYTkrQv9M1iv5fHrRWWc47I18
      dKiICoDABOZFlZC7p5hGuzMF3R31fHQ4j5O2m3ijScEEt5Tx4Vnne3Tb7YyeKR26tjI+rHEe
      191Rz5m8bbz33zf/OwrP5fbPAcAfw9otTCh8k/2Z62mxO/o/Ce55fn7qFsYdyGF7Wh4d3eA3
      IYJZP0phWchNvI0ugWUrK3ltx3oK7aCd9hCb0u5j5B8Ry4Pmz/jNrjRSO75COzmKBOMKlran
      IxnwHd+4evXqVXcPwpd1dnbyjy8edfcwxAjcXgIJ4U4yA4yxzs5Obr/9dncPY0y1tbUREBDg
      7mF8LTIDCKVJAITSJABCaRIAoTQP+BzA90lPsOeSGUAozfdmAFs+GZkFnLvmiSksSZfeXTGY
      7wUAYMy/PSrN8L5CSiChNN+cAa7H0UzpO29wpKSWFmezLzH3PMq6lDh62wLay/PYue809c5v
      3xFhWIZp5Ry+VWbB3N9gjLPDWMorb6VmAFpqaAxIwrx1FhET/HDYGynO3kHu6Rd5Yp4OHFby
      cpu585mX2RimBXsLtSWl1LTAtwwmsrOlBPIVvhkAqwWzeeiDBkzZJgwAIQk8aOx/RqMN4975
      ek42XADC4UoXXeO+Tfh3evqDtZOJSUwmxkXDF67jmwG47kXw4JXo+l/X0+yrM7Bw9gl2P/0c
      4d+bzffv+gE/nN7bHC98iW8G4DouFO1hb2U8pufXENPf7Iu5r9lXR+xPM9mx9BKN1WV8XJpH
      5pt+JD/1DHdLyeNTlLwLVFfdyV0pi/pP/hFotBOJmLkA4+qNZD4wjpPWm+nBFN5AyQDodG2U
      fViD3dnsS/2ZPLYNbPa1nSQ370xfeeSwN1L6X40EB0/qOWASwcEtlH14lm6Abjt2lzfti1vB
      N0ugYS+C+29Vxj5o5rPf7CIttYOvtJOJSjCyYmk76b0ZCJnJ7IDfsX/zgb7Vqmfc9zhr+paD
      05GwbCWVr+1gvbPBmIc2pXHfzfQoC48gHWFjTHqCPZuSJZAQvWQGGGPSE+zZZAYQSpMACKVJ
      AITSfPM2qIeRlkjPJTOAUJoXzQAOmkvfwnLQ6vyEVqNlYlgsC1OWkTTjm4y2xdgtY7WQYVtC
      hnwH2md4TQDaT+0i89+nsG7Ty8yYrEXT3UH9Jx/wx+IzNM1YfEu3PrVazFgN2YxpV6XwCF4S
      gFZKTteSkLKemZN7HvKbQMRsI+bZbh2Y8HJeEoAAAgK6aG5uB0bborSdqvx9vPn+57TYHfgF
      zWTx6jUYp/ftp4rFbMXQ2xgDDGpwZ8CKElYzvV8nMpgGzAZfXeLz4/nDbscqvI+XBECDwbiE
      Y1s3kl7zAI8sWsCMAbs59rIVZrG3Kp7H0tcxM+g27DVF7N79Mkc2bGbpqBsR9wg1kpFtHLUE
      Gm07VuF9vOYukCbcyKaXnuHe8R9z4KX1PLH+l+QWn6W974gKiooC+XGqkZlBfoAG7dRFpKYE
      c6Kw7DrbId24v207VuFpvCYAAJpvRpG4/Fle2rWLF59IhA+2kW6xOkPQVEddQCSRQzab1MXG
      EmGz0eSOAQuP51UB6OdHUEwiq7f8jDsqiihpdfd4hLfykgA4cAxXw2h06MZf5vJlICSSyLYa
      atoHH9JVUUF9aOgom+EJlXlJAJo49uq/klf8pXMhK8Bhb+HTQ3n8OXgeCSEAsSQlXeJodu92
      qw7sNcfZc/gCC5Pjey6YAwkMtHG2xo4DB/aWLynO3cv75we/W3BwMJXWUv7XATjs2LsRPspL
      7gKF8MMf38kf3nuLre824fwgeCJh8Sk8v2EuwT1HhSZv4HHHPt7s2W7VL2gmi81pGPvuAEWT
      vGI6O3Y+zTE7PVufLiHx7OCOrcjFq7h7Xy7PpebQ7TeBBaYdPHqHS39h4SLSEDPGpCXSs3lJ
      CSTE2JAZYIxJS6RnkxlAKE0CIJQmARBKkwAIpXnJ5wDeTXqCPZfMAEJpXhsAR+lrpOaUXfN4
      9aFfYDbv5NTQbyhXH+IX/1aEfG9ODOS1AdBMn05kVRXVgx5tpa4ulHnz/kpt7eDjW+vqGK/X
      E3hL3t1GfkYG+bJdgNfz2gAQqEc/vo66gX/Su8opJ46lP4imunxgNBxUVdmYNi3cxYMUns6L
      L4LDmTbNRnGVg6Q5PV92q62lU38PgVHjmVRQRyvRPX/x66iriyJqVf+rHc2lvGU5iLW+g27Z
      JlVZXhwA0Ov1WCorYY6zH7e6vJrwuBWg82Pa5YOUdyUxXwc0VVIZHMei3m6xrjLe2FVCjGkr
      K8O0YG/k1Os7ySp8is3JobJNqkK8twTCeR0QWl2NsxRvpa4uBL0eIAS9vv86oOuLL2iPjOyr
      /7usxVy5P5XEnsZ6jTaMxNSHmVx8ynlNMWSbVE3PNqkJ0lXjc7x6BiAwksiuAmq6IJRyypnO
      Yz3VUPT0v2f/Fw0QG05tbT3TZ0X3vay2tpayU6mYc4b+QANzQLZJVYh3B4Bo4uLq+c9KmE8l
      f9Uv7r/Lo9cz6XglrdxGdXUE+of7X3XlypXBa/1cQ7ZJVYVXl0AAUVERVFVVU131P0QPvMuj
      m8a0y1VUtddQw1SmDlgtIjIykory8usulSLbpPo+rw+ALi6O4LoSSip76/9eIej1TVQeraQp
      NnbQ2qGBCfOIKsllT3Fjz/am3XTUf8ThvJPO6wmbbJOqCi8vgXBeB1w4RFHwIyQPWfwtMjqU
      7RYr8aZVg5/wn0/qlnEcyNlOWl4H3fgxIWIWP0pZ5lw9QrZJVYZ0hI0x6Qn2bF5fAgnxt5AZ
      YIxJT7BnkxlAKE1mgDHW2dnp7iGIUXj/XSAv4OslkDeXeVICCaVJAITSJABCaRIAoTS5CySU
      JjOAUJoEQChNAiCUJgEQSpMACKVJAITS5LtALtZelc++3GN8erHbuYvl6jUYp/v3H2C1kGFb
      QsagBYdsFL7wCg3JWzAZ/K/5mWPPisVswTr0YYOJ7N6VBTxy3NfR/RcJgEvZCsl6tYw7nn6Z
      f5nqR3dNAdt2ZKHZtJnkEVebcNCQn8PJkJ+yxV0nkc2GLfoRfv3zpJtYW9UDxj2ibv5y5gCv
      /fYzKYFcx0H5iSImLtvA0qlaNGjQTl3KhmUTKTox8goVjoZCcv8jlOUrDLjtNDp3jtYpU25q
      YWGPGPdIbB9w5LPvYfr1SxIA16mjoiICw5C/hv4GAxEVFdQN9xJHAwV7TxK5ahXxuuEOcA2b
      zUZUVNSNv8BDxj2i0MWYV88lTKuREsh1Wmm9HETc0BNCF0TQ5Yph9i1wUH14DyWxqbwQq7nm
      WVc6f/48FQVPYd4PoEE7MYz4Jf/ETxK/O8xfd88Z942QALhSYOAwZUQggUMePFeQibkAGP8P
      mLdH4+7TKH7tHrLX9v6vm456Kwct28i6tJFNxvC+8XnauG+ElECu1No6zF/6VlqHPDhlSTrZ
      2a+w7vuf897vq6+7gp1r+TEhYi5rNzzAuD8e45MBz3j2uIcnAXCZQALHX+Ti0K2bui5ycfxw
      M4OO+FUbuLMymxxru2uGeDOCgwl2OIY5yT183ENIAFwmktjYeqxDTop2q5X62Fgih3uJJhxj
      6mJac7ModNuypO20D3ceX7jABZ2OYa9xPWLcN0YC4DIa4hYmcelgFkdq7DhwYK85QtbBSyQt
      jBu5Xg5OInV1CCdz8mlwS03xJe88l05u8Ze02B2AA3vjGXKyjvJ/i5KIHellbh/3jZGLYFcK
      TWbDkw72vZ5Gau8nwU9uGOVDMCd/w1qebHiBrJxQMk2uvq8ez6pfaik6+A5b363HuWNUBLMe
      eJaN11kr3r3jHpktP4PMgnOAdIQJxUkJJJQmARBKkwAIpUkAhNIkAEJpEgChNAmAUJoEQChN
      AiCUJgEQSpMACKVJAITSJABCaRIAoTQJgFCaBEAoTQIglCYBEEqTAAilSQCE0iQAQmkSAKE0
      CYBQmgRAKE0CIJQmARBKkwAIpUkAhNIkAEJpEgChNAmAUJoEQChNAiCUJgEQSpMACKX9P8Zr
      gXVqFzDOAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Profits by Segment' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Profits by Shipping' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Profits by State' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
